
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005118  08005118  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b4  2000006c  0800518c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004220  0800518c  00024220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a78  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c4b  00000000  00000000  00031b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  000347a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4c  00000000  00000000  000358d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b43  00000000  00000000  0003661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013098  00000000  00000000  0004f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097ad6  00000000  00000000  000621f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed8  00000000  00000000  000f9cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000feba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ff0 	.word	0x08004ff0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004ff0 	.word	0x08004ff0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("starting....\r\n");
 8000606:	4819      	ldr	r0, [pc, #100]	; (800066c <main+0x6c>)
 8000608:	f003 fe88 	bl	800431c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb98 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f836 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8ca 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f89e 	bl	8000758 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <main+0x70>)
 800061e:	f107 041c 	add.w	r4, r7, #28
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f877 	bl	800272a <osThreadCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x74>)
 8000640:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityLow, 0, 128);
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <main+0x78>)
 8000644:	463c      	mov	r4, r7
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000654:	463b      	mov	r3, r7
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f866 	bl	800272a <osThreadCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <main+0x7c>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f002 f85a 	bl	800271c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x68>
 800066a:	bf00      	nop
 800066c:	08005008 	.word	0x08005008
 8000670:	08005020 	.word	0x08005020
 8000674:	20000324 	.word	0x20000324
 8000678:	08005044 	.word	0x08005044
 800067c:	20000328 	.word	0x20000328

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 ff24 	bl	80044dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a28      	ldr	r2, [pc, #160]	; (8000750 <SystemClock_Config+0xd0>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemClock_Config+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd4>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f4:	2310      	movs	r3, #16
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fdda 	bl	80012c4 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000716:	f000 f939 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f83c 	bl	80017b4 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000742:	f000 f923 	bl	800098c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f001 fcd6 	bl	8002140 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f8f7 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002dc 	.word	0x200002dc
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	; (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fd2a 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000854:	f000 fb98 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fb8a 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	e009      	b.n	80008ae <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	60ba      	str	r2, [r7, #8]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe84 	bl	80005b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3301      	adds	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dbf1      	blt.n	800089a <_write+0x12>
  }
  return len;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("TASK-1\n");
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <StartTask1+0x18>)
 80008ca:	f003 fd27 	bl	800431c <puts>
    osDelay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f001 ff82 	bl	80027da <osDelay>
	printf("TASK-1\n");
 80008d6:	e7f7      	b.n	80008c8 <StartTask1+0x8>
 80008d8:	08005060 	.word	0x08005060

080008dc <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	printf("TASK-2 : indx=%d \n",indx++);
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <StartTask2+0x74>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	b2d1      	uxtb	r1, r2
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <StartTask2+0x74>)
 80008ee:	7011      	strb	r1, [r2, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <StartTask2+0x78>)
 80008f4:	f003 fcac 	bl	8004250 <iprintf>
    osDelay(2000);
 80008f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008fc:	f001 ff6d 	bl	80027da <osDelay>
    if (indx == 2)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <StartTask2+0x74>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d108      	bne.n	800091a <StartTask2+0x3e>
    {
    	printf("suspending task1...\n");
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <StartTask2+0x7c>)
 800090a:	f003 fd07 	bl	800431c <puts>
    	osThreadSuspend(Task1Handle);
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <StartTask2+0x80>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f001 ff75 	bl	8002802 <osThreadSuspend>
 8000918:	e7e4      	b.n	80008e4 <StartTask2+0x8>
    }
    else if(indx == 4)
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <StartTask2+0x74>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d108      	bne.n	8000934 <StartTask2+0x58>
    {
    	printf("resuming task1...\n");
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <StartTask2+0x84>)
 8000924:	f003 fcfa 	bl	800431c <puts>
    	osThreadResume(Task1Handle);
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <StartTask2+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ff75 	bl	800281c <osThreadResume>
 8000932:	e7d7      	b.n	80008e4 <StartTask2+0x8>
//    if(indx == 6)
//        {
//        	uint32_t PreviousWakeTime = osKernelSysTick();
//        	osDelayUntil(&PreviousWakeTime, 3000);
//        }
    else if(indx == 8)
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <StartTask2+0x74>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b08      	cmp	r3, #8
 800093a:	d1d3      	bne.n	80008e4 <StartTask2+0x8>
    {
    	printf("terminating task1...\n");
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <StartTask2+0x88>)
 800093e:	f003 fced 	bl	800431c <puts>
    	osThreadTerminate(Task1Handle);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <StartTask2+0x80>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f001 ff3b 	bl	80027c2 <osThreadTerminate>
	printf("TASK-2 : indx=%d \n",indx++);
 800094c:	e7ca      	b.n	80008e4 <StartTask2+0x8>
 800094e:	bf00      	nop
 8000950:	2000032c 	.word	0x2000032c
 8000954:	08005068 	.word	0x08005068
 8000958:	0800507c 	.word	0x0800507c
 800095c:	20000324 	.word	0x20000324
 8000960:	08005090 	.word	0x08005090
 8000964:	080050a4 	.word	0x080050a4

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 fa03 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40000c00 	.word	0x40000c00

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 faa9 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x8c>)
 8000a66:	f000 fa8f 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <HAL_InitTick+0xe4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f89c 	bl	8001bf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac6:	f001 f86d 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000aca:	6378      	str	r0, [r7, #52]	; 0x34
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ace:	f001 f869 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <HAL_InitTick+0xe8>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	0c9b      	lsrs	r3, r3, #18
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_InitTick+0xec>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_InitTick+0xf0>)
 8000aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_InitTick+0xec>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_InitTick+0xec>)
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_InitTick+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_InitTick+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_InitTick+0xec>)
 8000b0e:	f001 f8a3 	bl	8001c58 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11b      	bne.n	8000b58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_InitTick+0xec>)
 8000b22:	f001 f8f3 	bl	8001d0c <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d111      	bne.n	8000b58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f000 fa19 	bl	8000f6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d808      	bhi.n	8000b52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2032      	movs	r0, #50	; 0x32
 8000b46:	f000 f9f5 	bl	8000f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0xf4>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e002      	b.n	8000b58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	20000330 	.word	0x20000330
 8000b70:	40000c00 	.word	0x40000c00
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM5_IRQHandler+0x10>)
 8000baa:	f001 f911 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000330 	.word	0x20000330

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f003 fc74 	bl	8004578 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20018000 	.word	0x20018000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	20000378 	.word	0x20000378
 8000cc4:	20004220 	.word	0x20004220

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f003 fc33 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc6f 	bl	8000600 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d30:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 8000d34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d38:	20004220 	.word	0x20004220

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8d8 	bl	8000f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe86 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fe10 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	2000037c 	.word	0x2000037c

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000037c 	.word	0x2000037c

08000dc4 <__NVIC_SetPriorityGrouping>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff4c 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f46:	f7ff ff61 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffb1 	bl	8000eb8 <NVIC_EncodePriority>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff80 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff54 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e159      	b.n	8001258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8148 	bne.w	8001252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a56      	ldr	r2, [pc, #344]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <HAL_GPIO_Init+0x2f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x202>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2f4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1fe>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1fa>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2fc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1f6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1f2>
 8001176:	2304      	movs	r3, #4
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117a:	2307      	movs	r3, #7
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x204>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_GPIO_Init+0x304>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_GPIO_Init+0x304>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x304>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_GPIO_Init+0x304>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f aea2 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e267      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e242      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fd16 	bl	8000dac <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fd12 	bl	8000dac <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e207      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fd02 	bl	8000dac <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcfe 	bl	8000dac <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f3      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fcb7 	bl	8000dac <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fcb3 	bl	8000dac <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a8      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4925      	ldr	r1, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc96 	bl	8000dac <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc92 	bl	8000dac <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e187      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc76 	bl	8000dac <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc72 	bl	8000dac <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e167      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc5f 	bl	8000dac <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc5b 	bl	8000dac <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d907      	bls.n	8001510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e150      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ea      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8097 	beq.w	8001658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fc1b 	bl	8000dac <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fc17 	bl	8000dac <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e10c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x2ea>
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x30c>
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbdc 	bl	8000dac <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbd8 	bl	8000dac <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0cb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x334>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fbc6 	bl	8000dac <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fbc2 	bl	8000dac <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b5      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a1 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d05c      	beq.n	8001728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d141      	bne.n	80016fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb96 	bl	8000dac <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb92 	bl	8000dac <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e087      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb6b 	bl	8000dac <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb67 	bl	8000dac <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e05c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x416>
 80016f8:	e054      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb54 	bl	8000dac <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb50 	bl	8000dac <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e045      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e038      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
 800173c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d028      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa82 	bl	8000dac <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa7e 	bl	8000dac <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f890 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	080050c4 	.word	0x080050c4
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b094      	sub	sp, #80	; 0x50
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80e1 	bhi.w	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0db      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b8:	e0db      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019be:	e0d8      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	1a51      	subs	r1, r2, r1
 8001a0e:	6139      	str	r1, [r7, #16]
 8001a10:	4629      	mov	r1, r5
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a24:	4659      	mov	r1, fp
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4651      	mov	r1, sl
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4651      	mov	r1, sl
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4651      	mov	r1, sl
 8001a34:	ebb2 0801 	subs.w	r8, r2, r1
 8001a38:	4659      	mov	r1, fp
 8001a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	eb18 0303 	adds.w	r3, r8, r3
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	462b      	mov	r3, r5
 8001a60:	eb49 0303 	adc.w	r3, r9, r3
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a72:	4629      	mov	r1, r5
 8001a74:	024b      	lsls	r3, r1, #9
 8001a76:	4621      	mov	r1, r4
 8001a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	024a      	lsls	r2, r1, #9
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a86:	2200      	movs	r2, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a90:	f7fe fbf6 	bl	8000280 <__aeabi_uldivmod>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	e058      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0159      	lsls	r1, r3, #5
 8001ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aca:	0150      	lsls	r0, r2, #5
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af0:	ebb2 040a 	subs.w	r4, r2, sl
 8001af4:	eb63 050b 	sbc.w	r5, r3, fp
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00eb      	lsls	r3, r5, #3
 8001b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b06:	00e2      	lsls	r2, r4, #3
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	18e3      	adds	r3, r4, r3
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	464b      	mov	r3, r9
 8001b14:	eb45 0303 	adc.w	r3, r5, r3
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	61fa      	str	r2, [r7, #28]
 8001b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b44:	f7fe fb9c 	bl	8000280 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	080050d4 	.word	0x080050d4

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffdc 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0b5b      	lsrs	r3, r3, #13
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	080050d4 	.word	0x080050d4

08001bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	220f      	movs	r2, #15
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCC_GetClockConfig+0x60>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e041      	b.n	8001cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f839 	bl	8001cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f000 f9b2 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d001      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e044      	b.n	8001dae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_TIM_Base_Start_IT+0xb0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d018      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4e:	d013      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00e      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x6c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <HAL_TIM_Base_Start_IT+0xc0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d111      	bne.n	8001d9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d010      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9a:	e007      	b.n	8001dac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800
 8001dc8:	40000c00 	.word	0x40000c00
 8001dcc:	40014000 	.word	0x40014000

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8d2 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8d5 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ac 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f89e 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8af 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f886 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f878 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f889 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f860 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f852 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f863 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fd16 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8e6 	bl	800212c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f834 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8b8 	bl	8002118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <TIM_Base_SetConfig+0xfc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00f      	beq.n	8002038 <TIM_Base_SetConfig+0x38>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d00b      	beq.n	8002038 <TIM_Base_SetConfig+0x38>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a37      	ldr	r2, [pc, #220]	; (8002100 <TIM_Base_SetConfig+0x100>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <TIM_Base_SetConfig+0x38>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a36      	ldr	r2, [pc, #216]	; (8002104 <TIM_Base_SetConfig+0x104>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0x38>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a35      	ldr	r2, [pc, #212]	; (8002108 <TIM_Base_SetConfig+0x108>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d108      	bne.n	800204a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <TIM_Base_SetConfig+0xfc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01b      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d017      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a28      	ldr	r2, [pc, #160]	; (8002100 <TIM_Base_SetConfig+0x100>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <TIM_Base_SetConfig+0x104>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00f      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <TIM_Base_SetConfig+0x108>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00b      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <TIM_Base_SetConfig+0x10c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <TIM_Base_SetConfig+0x110>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_Base_SetConfig+0x8a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <TIM_Base_SetConfig+0x114>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d108      	bne.n	800209c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <TIM_Base_SetConfig+0xfc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d103      	bne.n	80020d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f023 0201 	bic.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40014000 	.word	0x40014000
 8002110:	40014400 	.word	0x40014400
 8002114:	40014800 	.word	0x40014800

08002118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e042      	b.n	80021d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fc42 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f82b 	bl	80021e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b0c0      	sub	sp, #256	; 0x100
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	ea40 0301 	orr.w	r3, r0, r1
 8002208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	431a      	orrs	r2, r3
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	431a      	orrs	r2, r3
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002238:	f021 010c 	bic.w	r1, r1, #12
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002246:	430b      	orrs	r3, r1
 8002248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225a:	6999      	ldr	r1, [r3, #24]
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	ea40 0301 	orr.w	r3, r0, r1
 8002266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <UART_SetConfig+0x2cc>)
 8002270:	429a      	cmp	r2, r3
 8002272:	d005      	beq.n	8002280 <UART_SetConfig+0xa0>
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <UART_SetConfig+0x2d0>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d104      	bne.n	800228a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002280:	f7ff fca4 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002288:	e003      	b.n	8002292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800228a:	f7ff fc8b 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 800228e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229c:	f040 810c 	bne.w	80024b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	1891      	adds	r1, r2, r2
 80022b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80022ba:	415b      	adcs	r3, r3
 80022bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022c2:	4621      	mov	r1, r4
 80022c4:	eb12 0801 	adds.w	r8, r2, r1
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb43 0901 	adc.w	r9, r3, r1
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e2:	4690      	mov	r8, r2
 80022e4:	4699      	mov	r9, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	eb18 0303 	adds.w	r3, r8, r3
 80022ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022f0:	462b      	mov	r3, r5
 80022f2:	eb49 0303 	adc.w	r3, r9, r3
 80022f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800230a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800230e:	460b      	mov	r3, r1
 8002310:	18db      	adds	r3, r3, r3
 8002312:	653b      	str	r3, [r7, #80]	; 0x50
 8002314:	4613      	mov	r3, r2
 8002316:	eb42 0303 	adc.w	r3, r2, r3
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
 800231c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002324:	f7fd ffac 	bl	8000280 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <UART_SetConfig+0x2d4>)
 800232e:	fba3 2302 	umull	r2, r3, r3, r2
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	011c      	lsls	r4, r3, #4
 8002336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233a:	2200      	movs	r2, #0
 800233c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	1891      	adds	r1, r2, r2
 800234e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002350:	415b      	adcs	r3, r3
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002358:	4641      	mov	r1, r8
 800235a:	eb12 0a01 	adds.w	sl, r2, r1
 800235e:	4649      	mov	r1, r9
 8002360:	eb43 0b01 	adc.w	fp, r3, r1
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002378:	4692      	mov	sl, r2
 800237a:	469b      	mov	fp, r3
 800237c:	4643      	mov	r3, r8
 800237e:	eb1a 0303 	adds.w	r3, sl, r3
 8002382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002386:	464b      	mov	r3, r9
 8002388:	eb4b 0303 	adc.w	r3, fp, r3
 800238c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800239c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023a4:	460b      	mov	r3, r1
 80023a6:	18db      	adds	r3, r3, r3
 80023a8:	643b      	str	r3, [r7, #64]	; 0x40
 80023aa:	4613      	mov	r3, r2
 80023ac:	eb42 0303 	adc.w	r3, r2, r3
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
 80023b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023ba:	f7fd ff61 	bl	8000280 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <UART_SetConfig+0x2d4>)
 80023c6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2264      	movs	r2, #100	; 0x64
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	1acb      	subs	r3, r1, r3
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <UART_SetConfig+0x2d4>)
 80023dc:	fba3 2302 	umull	r2, r3, r3, r2
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023e8:	441c      	add	r4, r3
 80023ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023fc:	4642      	mov	r2, r8
 80023fe:	464b      	mov	r3, r9
 8002400:	1891      	adds	r1, r2, r2
 8002402:	63b9      	str	r1, [r7, #56]	; 0x38
 8002404:	415b      	adcs	r3, r3
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800240c:	4641      	mov	r1, r8
 800240e:	1851      	adds	r1, r2, r1
 8002410:	6339      	str	r1, [r7, #48]	; 0x30
 8002412:	4649      	mov	r1, r9
 8002414:	414b      	adcs	r3, r1
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002424:	4659      	mov	r1, fp
 8002426:	00cb      	lsls	r3, r1, #3
 8002428:	4651      	mov	r1, sl
 800242a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800242e:	4651      	mov	r1, sl
 8002430:	00ca      	lsls	r2, r1, #3
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	4603      	mov	r3, r0
 8002438:	4642      	mov	r2, r8
 800243a:	189b      	adds	r3, r3, r2
 800243c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002440:	464b      	mov	r3, r9
 8002442:	460a      	mov	r2, r1
 8002444:	eb42 0303 	adc.w	r3, r2, r3
 8002448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800245c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002460:	460b      	mov	r3, r1
 8002462:	18db      	adds	r3, r3, r3
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	4613      	mov	r3, r2
 8002468:	eb42 0303 	adc.w	r3, r2, r3
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002476:	f7fd ff03 	bl	8000280 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <UART_SetConfig+0x2d4>)
 8002480:	fba3 1302 	umull	r1, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	2164      	movs	r1, #100	; 0x64
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	3332      	adds	r3, #50	; 0x32
 8002492:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <UART_SetConfig+0x2d4>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	f003 0207 	and.w	r2, r3, #7
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4422      	add	r2, r4
 80024a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024a8:	e106      	b.n	80026b8 <UART_SetConfig+0x4d8>
 80024aa:	bf00      	nop
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40011400 	.word	0x40011400
 80024b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024bc:	2200      	movs	r2, #0
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024ca:	4642      	mov	r2, r8
 80024cc:	464b      	mov	r3, r9
 80024ce:	1891      	adds	r1, r2, r2
 80024d0:	6239      	str	r1, [r7, #32]
 80024d2:	415b      	adcs	r3, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024da:	4641      	mov	r1, r8
 80024dc:	1854      	adds	r4, r2, r1
 80024de:	4649      	mov	r1, r9
 80024e0:	eb43 0501 	adc.w	r5, r3, r1
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	00eb      	lsls	r3, r5, #3
 80024ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f2:	00e2      	lsls	r2, r4, #3
 80024f4:	4614      	mov	r4, r2
 80024f6:	461d      	mov	r5, r3
 80024f8:	4643      	mov	r3, r8
 80024fa:	18e3      	adds	r3, r4, r3
 80024fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002500:	464b      	mov	r3, r9
 8002502:	eb45 0303 	adc.w	r3, r5, r3
 8002506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002526:	4629      	mov	r1, r5
 8002528:	008b      	lsls	r3, r1, #2
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002530:	4621      	mov	r1, r4
 8002532:	008a      	lsls	r2, r1, #2
 8002534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002538:	f7fd fea2 	bl	8000280 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <UART_SetConfig+0x4e4>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	011c      	lsls	r4, r3, #4
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	61b9      	str	r1, [r7, #24]
 8002564:	415b      	adcs	r3, r3
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800256c:	4641      	mov	r1, r8
 800256e:	1851      	adds	r1, r2, r1
 8002570:	6139      	str	r1, [r7, #16]
 8002572:	4649      	mov	r1, r9
 8002574:	414b      	adcs	r3, r1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002584:	4659      	mov	r1, fp
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	4651      	mov	r1, sl
 800258a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258e:	4651      	mov	r1, sl
 8002590:	00ca      	lsls	r2, r1, #3
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	4603      	mov	r3, r0
 8002598:	4642      	mov	r2, r8
 800259a:	189b      	adds	r3, r3, r2
 800259c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a0:	464b      	mov	r3, r9
 80025a2:	460a      	mov	r2, r1
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025c4:	4649      	mov	r1, r9
 80025c6:	008b      	lsls	r3, r1, #2
 80025c8:	4641      	mov	r1, r8
 80025ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ce:	4641      	mov	r1, r8
 80025d0:	008a      	lsls	r2, r1, #2
 80025d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025d6:	f7fd fe53 	bl	8000280 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <UART_SetConfig+0x4e4>)
 80025e2:	fba3 2301 	umull	r2, r3, r3, r1
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2264      	movs	r2, #100	; 0x64
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	1acb      	subs	r3, r1, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	3332      	adds	r3, #50	; 0x32
 80025f4:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <UART_SetConfig+0x4e4>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002600:	441c      	add	r4, r3
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	673b      	str	r3, [r7, #112]	; 0x70
 800260a:	677a      	str	r2, [r7, #116]	; 0x74
 800260c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	415b      	adcs	r3, r3
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002620:	4641      	mov	r1, r8
 8002622:	1851      	adds	r1, r2, r1
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	4649      	mov	r1, r9
 8002628:	414b      	adcs	r3, r1
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002638:	4659      	mov	r1, fp
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002642:	4651      	mov	r1, sl
 8002644:	00ca      	lsls	r2, r1, #3
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4603      	mov	r3, r0
 800264c:	4642      	mov	r2, r8
 800264e:	189b      	adds	r3, r3, r2
 8002650:	66bb      	str	r3, [r7, #104]	; 0x68
 8002652:	464b      	mov	r3, r9
 8002654:	460a      	mov	r2, r1
 8002656:	eb42 0303 	adc.w	r3, r2, r3
 800265a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	663b      	str	r3, [r7, #96]	; 0x60
 8002666:	667a      	str	r2, [r7, #100]	; 0x64
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002674:	4649      	mov	r1, r9
 8002676:	008b      	lsls	r3, r1, #2
 8002678:	4641      	mov	r1, r8
 800267a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800267e:	4641      	mov	r1, r8
 8002680:	008a      	lsls	r2, r1, #2
 8002682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002686:	f7fd fdfb 	bl	8000280 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <UART_SetConfig+0x4e4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <UART_SetConfig+0x4e4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4422      	add	r2, r4
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bf00      	nop
 80026ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026be:	46bd      	mov	sp, r7
 80026c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c4:	51eb851f 	.word	0x51eb851f

080026c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026da:	2b84      	cmp	r3, #132	; 0x84
 80026dc:	d005      	beq.n	80026ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4413      	add	r3, r2
 80026e6:	3303      	adds	r3, #3
 80026e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026fe:	f3ef 8305 	mrs	r3, IPSR
 8002702:	607b      	str	r3, [r7, #4]
  return(result);
 8002704:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002720:	f000 fd3e 	bl	80031a0 <vTaskStartScheduler>
  
  return osOK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}

0800272a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800272a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272c:	b089      	sub	sp, #36	; 0x24
 800272e:	af04      	add	r7, sp, #16
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <osThreadCreate+0x54>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685c      	ldr	r4, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691e      	ldr	r6, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ffb6 	bl	80026c8 <makeFreeRtosPriority>
 800275c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9100      	str	r1, [sp, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4632      	mov	r2, r6
 8002770:	4629      	mov	r1, r5
 8002772:	4620      	mov	r0, r4
 8002774:	f000 f928 	bl	80029c8 <xTaskCreateStatic>
 8002778:	4603      	mov	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e01c      	b.n	80027b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685c      	ldr	r4, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800278a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff98 	bl	80026c8 <makeFreeRtosPriority>
 8002798:	4602      	mov	r2, r0
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4632      	mov	r2, r6
 80027a6:	4629      	mov	r1, r5
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 f96a 	bl	8002a82 <xTaskCreate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d001      	beq.n	80027b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa90 	bl	8002cf0 <vTaskDelete>
  return osOK;
 80027d0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <osDelay+0x16>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	e000      	b.n	80027f2 <osDelay+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fb0c 	bl	8002e10 <vTaskDelay>
  
  return osOK;
 80027f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fb34 	bl	8002e78 <vTaskSuspend>
  
  return osOK;
 8002810:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8002824:	f7ff ff68 	bl	80026f8 <inHandlerMode>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc44 	bl	80030bc <xTaskResumeFromISR>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10b      	bne.n	8002852 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <osThreadResume+0x40>)
 800283c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	e002      	b.n	8002852 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fbd7 	bl	8003000 <vTaskResume>
  }
  return osOK;
 8002852:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f103 0208 	add.w	r2, r3, #8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f103 0208 	add.w	r2, r3, #8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0208 	add.w	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d103      	bne.n	8002922 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e00c      	b.n	800293c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3308      	adds	r3, #8
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e002      	b.n	8002930 <vListInsert+0x2e>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	d2f6      	bcs.n	800292a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6852      	ldr	r2, [r2, #4]
 8002994:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d103      	bne.n	80029a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af04      	add	r7, sp, #16
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xTaskCreateStatic+0x46>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61fb      	str	r3, [r7, #28]
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a0e:	2354      	movs	r3, #84	; 0x54
 8002a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b54      	cmp	r3, #84	; 0x54
 8002a16:	d00a      	beq.n	8002a2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	61bb      	str	r3, [r7, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01e      	beq.n	8002a74 <xTaskCreateStatic+0xac>
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f850 	bl	8002b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a6e:	f000 f8d5 	bl	8002c1c <prvAddNewTaskToReadyList>
 8002a72:	e001      	b.n	8002a78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a78:	697b      	ldr	r3, [r7, #20]
	}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08c      	sub	sp, #48	; 0x30
 8002a86:	af04      	add	r7, sp, #16
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f92e 	bl	8003cf8 <pvPortMalloc>
 8002a9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aa4:	2054      	movs	r0, #84	; 0x54
 8002aa6:	f001 f927 	bl	8003cf8 <pvPortMalloc>
 8002aaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab8:	e005      	b.n	8002ac6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f001 f9e8 	bl	8003e90 <vPortFree>
 8002ac0:	e001      	b.n	8002ac6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d017      	beq.n	8002afc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f80e 	bl	8002b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af0:	69f8      	ldr	r0, [r7, #28]
 8002af2:	f000 f893 	bl	8002c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e002      	b.n	8002b02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b02:	69bb      	ldr	r3, [r7, #24]
	}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	3b01      	subs	r3, #1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f023 0307 	bic.w	r3, r3, #7
 8002b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	617b      	str	r3, [r7, #20]
}
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01f      	beq.n	8002b9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e012      	b.n	8002b86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	7819      	ldrb	r1, [r3, #0]
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3334      	adds	r3, #52	; 0x34
 8002b70:	460a      	mov	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d9e9      	bls.n	8002b60 <prvInitialiseNewTask+0x54>
 8002b8c:	e000      	b.n	8002b90 <prvInitialiseNewTask+0x84>
			{
				break;
 8002b8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	e003      	b.n	8002ba2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d901      	bls.n	8002bac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ba8:	2306      	movs	r3, #6
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2200      	movs	r2, #0
 8002bbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fe6c 	bl	80028a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	3318      	adds	r3, #24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fe67 	bl	80028a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f1c3 0207 	rsb	r2, r3, #7
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	2200      	movs	r2, #0
 8002bec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f000 fe2a 	bl	8003854 <pxPortInitialiseStack>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c24:	f000 ff46 	bl	8003ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <prvAddNewTaskToReadyList+0xb8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <prvAddNewTaskToReadyList+0xb8>)
 8002c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <prvAddNewTaskToReadyList+0xbc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c3a:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <prvAddNewTaskToReadyList+0xbc>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c40:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <prvAddNewTaskToReadyList+0xb8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d110      	bne.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c48:	f000 fce0 	bl	800360c <prvInitialiseTaskLists>
 8002c4c:	e00d      	b.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <prvAddNewTaskToReadyList+0xc0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <prvAddNewTaskToReadyList+0xbc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d802      	bhi.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <prvAddNewTaskToReadyList+0xbc>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <prvAddNewTaskToReadyList+0xc4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <prvAddNewTaskToReadyList+0xc4>)
 8002c72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2201      	movs	r2, #1
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <prvAddNewTaskToReadyList+0xc8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <prvAddNewTaskToReadyList+0xc8>)
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <prvAddNewTaskToReadyList+0xcc>)
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff fe0c 	bl	80028ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ca2:	f000 ff37 	bl	8003b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <prvAddNewTaskToReadyList+0xc0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <prvAddNewTaskToReadyList+0xbc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d207      	bcs.n	8002ccc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <prvAddNewTaskToReadyList+0xd0>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000480 	.word	0x20000480
 8002cd8:	20000380 	.word	0x20000380
 8002cdc:	2000048c 	.word	0x2000048c
 8002ce0:	2000049c 	.word	0x2000049c
 8002ce4:	20000488 	.word	0x20000488
 8002ce8:	20000384 	.word	0x20000384
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002cf8:	f000 fedc 	bl	8003ab4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <vTaskDelete+0x18>
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <vTaskDelete+0xf8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e000      	b.n	8002d0a <vTaskDelete+0x1a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fe2f 	bl	8002974 <uxListRemove>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d115      	bne.n	8002d48 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	4932      	ldr	r1, [pc, #200]	; (8002dec <vTaskDelete+0xfc>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <vTaskDelete+0x58>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <vTaskDelete+0x100>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4013      	ands	r3, r2
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <vTaskDelete+0x100>)
 8002d46:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3318      	adds	r3, #24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fe0d 	bl	8002974 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <vTaskDelete+0x104>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <vTaskDelete+0x104>)
 8002d62:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <vTaskDelete+0xf8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10b      	bne.n	8002d86 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3304      	adds	r3, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4820      	ldr	r0, [pc, #128]	; (8002df8 <vTaskDelete+0x108>)
 8002d76:	f7ff fda0 	bl	80028ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <vTaskDelete+0x10c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <vTaskDelete+0x10c>)
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e009      	b.n	8002d9a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <vTaskDelete+0x110>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <vTaskDelete+0x110>)
 8002d8e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fca9 	bl	80036e8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d96:	f000 fcd7 	bl	8003748 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002d9a:	f000 febb 	bl	8003b14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <vTaskDelete+0x114>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01b      	beq.n	8002dde <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <vTaskDelete+0xf8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d116      	bne.n	8002dde <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <vTaskDelete+0x118>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <vTaskDelete+0xde>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	60bb      	str	r3, [r7, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <vTaskDelete+0x11c>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000380 	.word	0x20000380
 8002dec:	20000384 	.word	0x20000384
 8002df0:	20000488 	.word	0x20000488
 8002df4:	2000049c 	.word	0x2000049c
 8002df8:	20000454 	.word	0x20000454
 8002dfc:	20000468 	.word	0x20000468
 8002e00:	20000480 	.word	0x20000480
 8002e04:	2000048c 	.word	0x2000048c
 8002e08:	200004a8 	.word	0x200004a8
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d017      	beq.n	8002e52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <vTaskDelay+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <vTaskDelay+0x30>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60bb      	str	r3, [r7, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e40:	f000 fa0e 	bl	8003260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e44:	2100      	movs	r1, #0
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fc9e 	bl	8003788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e4c:	f000 fa16 	bl	800327c <xTaskResumeAll>
 8002e50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <vTaskDelay+0x64>)
 8002e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200004a8 	.word	0x200004a8
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002e80:	f000 fe18 	bl	8003ab4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <vTaskSuspend+0x18>
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <vTaskSuspend+0x104>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e000      	b.n	8002e92 <vTaskSuspend+0x1a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fd6b 	bl	8002974 <uxListRemove>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d115      	bne.n	8002ed0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <vTaskSuspend+0x108>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <vTaskSuspend+0x58>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <vTaskSuspend+0x10c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <vTaskSuspend+0x10c>)
 8002ece:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3318      	adds	r3, #24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fd49 	bl	8002974 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4827      	ldr	r0, [pc, #156]	; (8002f88 <vTaskSuspend+0x110>)
 8002eea:	f7ff fce6 	bl	80028ba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d103      	bne.n	8002f02 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002f02:	f000 fe07 	bl	8003b14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <vTaskSuspend+0x114>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002f0e:	f000 fdd1 	bl	8003ab4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002f12:	f000 fc19 	bl	8003748 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002f16:	f000 fdfd 	bl	8003b14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <vTaskSuspend+0x104>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d127      	bne.n	8002f74 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <vTaskSuspend+0x114>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <vTaskSuspend+0x118>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <vTaskSuspend+0xd2>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	60bb      	str	r3, [r7, #8]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <vTaskSuspend+0x11c>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f5a:	e00b      	b.n	8002f74 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <vTaskSuspend+0x110>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <vTaskSuspend+0x120>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d103      	bne.n	8002f70 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <vTaskSuspend+0x104>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
	}
 8002f6e:	e001      	b.n	8002f74 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002f70:	f000 fad8 	bl	8003524 <vTaskSwitchContext>
	}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000380 	.word	0x20000380
 8002f80:	20000384 	.word	0x20000384
 8002f84:	20000488 	.word	0x20000488
 8002f88:	2000046c 	.word	0x2000046c
 8002f8c:	2000048c 	.word	0x2000048c
 8002f90:	200004a8 	.word	0x200004a8
 8002f94:	e000ed04 	.word	0xe000ed04
 8002f98:	20000480 	.word	0x20000480

08002f9c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	60fb      	str	r3, [r7, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <prvTaskIsTaskSuspended+0x5c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10a      	bne.n	8002fe8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <prvTaskIsTaskSuspended+0x60>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d005      	beq.n	8002fe8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fe8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002fea:	4618      	mov	r0, r3
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000046c 	.word	0x2000046c
 8002ffc:	20000440 	.word	0x20000440

08003000 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <vTaskResume+0x28>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60bb      	str	r3, [r7, #8]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <vTaskResume+0xac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	429a      	cmp	r2, r3
 8003030:	d037      	beq.n	80030a2 <vTaskResume+0xa2>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d034      	beq.n	80030a2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003038:	f000 fd3c 	bl	8003ab4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ffad 	bl	8002f9c <prvTaskIsTaskSuspended>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02a      	beq.n	800309e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3304      	adds	r3, #4
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fc91 	bl	8002974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	2201      	movs	r2, #1
 8003058:	409a      	lsls	r2, r3
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <vTaskResume+0xb0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <vTaskResume+0xb0>)
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <vTaskResume+0xb4>)
 8003072:	441a      	add	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7ff fc1d 	bl	80028ba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <vTaskResume+0xac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	429a      	cmp	r2, r3
 800308c:	d307      	bcc.n	800309e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <vTaskResume+0xb8>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800309e:	f000 fd39 	bl	8003b14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000380 	.word	0x20000380
 80030b0:	20000488 	.word	0x20000488
 80030b4:	20000384 	.word	0x20000384
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61bb      	str	r3, [r7, #24]
}
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e8:	f000 fdc6 	bl	8003c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030ec:	f3ef 8211 	mrs	r2, BASEPRI
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	617a      	str	r2, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003104:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003106:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f7ff ff47 	bl	8002f9c <prvTaskIsTaskSuspended>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02f      	beq.n	8003174 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <xTaskResumeFromISR+0xd0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d125      	bne.n	8003168 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <xTaskResumeFromISR+0xd4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d301      	bcc.n	800312e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	3304      	adds	r3, #4
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc1e 	bl	8002974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <xTaskResumeFromISR+0xd8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <xTaskResumeFromISR+0xd8>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <xTaskResumeFromISR+0xdc>)
 8003158:	441a      	add	r2, r3
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7ff fbaa 	bl	80028ba <vListInsertEnd>
 8003166:	e005      	b.n	8003174 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	3318      	adds	r3, #24
 800316c:	4619      	mov	r1, r3
 800316e:	480b      	ldr	r0, [pc, #44]	; (800319c <xTaskResumeFromISR+0xe0>)
 8003170:	f7ff fba3 	bl	80028ba <vListInsertEnd>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800317e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003182:	4618      	mov	r0, r3
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004a8 	.word	0x200004a8
 8003190:	20000380 	.word	0x20000380
 8003194:	20000488 	.word	0x20000488
 8003198:	20000384 	.word	0x20000384
 800319c:	20000440 	.word	0x20000440

080031a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031ae:	463a      	mov	r2, r7
 80031b0:	1d39      	adds	r1, r7, #4
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9e0 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	9202      	str	r2, [sp, #8]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	460a      	mov	r2, r1
 80031ce:	491e      	ldr	r1, [pc, #120]	; (8003248 <vTaskStartScheduler+0xa8>)
 80031d0:	481e      	ldr	r0, [pc, #120]	; (800324c <vTaskStartScheduler+0xac>)
 80031d2:	f7ff fbf9 	bl	80029c8 <xTaskCreateStatic>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <vTaskStartScheduler+0xb0>)
 80031da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <vTaskStartScheduler+0xb0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e001      	b.n	80031ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d116      	bne.n	8003222 <vTaskStartScheduler+0x82>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	613b      	str	r3, [r7, #16]
}
 8003206:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <vTaskStartScheduler+0xb4>)
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <vTaskStartScheduler+0xb8>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <vTaskStartScheduler+0xbc>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800321c:	f000 fba8 	bl	8003970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003220:	e00e      	b.n	8003240 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d10a      	bne.n	8003240 <vTaskStartScheduler+0xa0>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60fb      	str	r3, [r7, #12]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <vTaskStartScheduler+0x9e>
}
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	080050bc 	.word	0x080050bc
 800324c:	080035dd 	.word	0x080035dd
 8003250:	200004a4 	.word	0x200004a4
 8003254:	200004a0 	.word	0x200004a0
 8003258:	2000048c 	.word	0x2000048c
 800325c:	20000484 	.word	0x20000484

08003260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <vTaskSuspendAll+0x18>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a03      	ldr	r2, [pc, #12]	; (8003278 <vTaskSuspendAll+0x18>)
 800326c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	200004a8 	.word	0x200004a8

0800327c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <xTaskResumeAll+0x114>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	603b      	str	r3, [r7, #0]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032a8:	f000 fc04 	bl	8003ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <xTaskResumeAll+0x114>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	4a37      	ldr	r2, [pc, #220]	; (8003390 <xTaskResumeAll+0x114>)
 80032b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <xTaskResumeAll+0x114>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d161      	bne.n	8003382 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <xTaskResumeAll+0x118>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d05d      	beq.n	8003382 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c6:	e02e      	b.n	8003326 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c8:	4b33      	ldr	r3, [pc, #204]	; (8003398 <xTaskResumeAll+0x11c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3318      	adds	r3, #24
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fb4d 	bl	8002974 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3304      	adds	r3, #4
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fb48 	bl	8002974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <xTaskResumeAll+0x120>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	4a2a      	ldr	r2, [pc, #168]	; (800339c <xTaskResumeAll+0x120>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <xTaskResumeAll+0x124>)
 8003304:	441a      	add	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7ff fad4 	bl	80028ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <xTaskResumeAll+0x128>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <xTaskResumeAll+0x12c>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <xTaskResumeAll+0x11c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1cc      	bne.n	80032c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003334:	f000 fa08 	bl	8003748 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <xTaskResumeAll+0x130>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003344:	f000 f836 	bl	80033b4 <xTaskIncrementTick>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <xTaskResumeAll+0x12c>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f1      	bne.n	8003344 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <xTaskResumeAll+0x130>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <xTaskResumeAll+0x12c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <xTaskResumeAll+0x134>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003382:	f000 fbc7 	bl	8003b14 <vPortExitCritical>

	return xAlreadyYielded;
 8003386:	68bb      	ldr	r3, [r7, #8]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200004a8 	.word	0x200004a8
 8003394:	20000480 	.word	0x20000480
 8003398:	20000440 	.word	0x20000440
 800339c:	20000488 	.word	0x20000488
 80033a0:	20000384 	.word	0x20000384
 80033a4:	20000380 	.word	0x20000380
 80033a8:	20000494 	.word	0x20000494
 80033ac:	20000490 	.word	0x20000490
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033be:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <xTaskIncrementTick+0x144>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 808e 	bne.w	80034e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <xTaskIncrementTick+0x148>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033d0:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <xTaskIncrementTick+0x148>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d120      	bne.n	800341e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033dc:	4b48      	ldr	r3, [pc, #288]	; (8003500 <xTaskIncrementTick+0x14c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <xTaskIncrementTick+0x48>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	603b      	str	r3, [r7, #0]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <xTaskIncrementTick+0x46>
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <xTaskIncrementTick+0x14c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <xTaskIncrementTick+0x150>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a3e      	ldr	r2, [pc, #248]	; (8003500 <xTaskIncrementTick+0x14c>)
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4a3e      	ldr	r2, [pc, #248]	; (8003504 <xTaskIncrementTick+0x150>)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <xTaskIncrementTick+0x154>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <xTaskIncrementTick+0x154>)
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	f000 f995 	bl	8003748 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <xTaskIncrementTick+0x158>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d348      	bcc.n	80034ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <xTaskIncrementTick+0x14c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <xTaskIncrementTick+0x158>)
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	601a      	str	r2, [r3, #0]
					break;
 800343a:	e03e      	b.n	80034ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <xTaskIncrementTick+0x14c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d203      	bcs.n	800345c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003454:	4a2d      	ldr	r2, [pc, #180]	; (800350c <xTaskIncrementTick+0x158>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800345a:	e02e      	b.n	80034ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3304      	adds	r3, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fa87 	bl	8002974 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3318      	adds	r3, #24
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fa7e 	bl	8002974 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	4b23      	ldr	r3, [pc, #140]	; (8003510 <xTaskIncrementTick+0x15c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	4a22      	ldr	r2, [pc, #136]	; (8003510 <xTaskIncrementTick+0x15c>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <xTaskIncrementTick+0x160>)
 8003498:	441a      	add	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3304      	adds	r3, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f7ff fa0a 	bl	80028ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <xTaskIncrementTick+0x164>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3b9      	bcc.n	8003428 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b8:	e7b6      	b.n	8003428 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <xTaskIncrementTick+0x164>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4914      	ldr	r1, [pc, #80]	; (8003514 <xTaskIncrementTick+0x160>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d901      	bls.n	80034d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <xTaskIncrementTick+0x168>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e004      	b.n	80034ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <xTaskIncrementTick+0x16c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <xTaskIncrementTick+0x16c>)
 80034ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034ee:	697b      	ldr	r3, [r7, #20]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200004a8 	.word	0x200004a8
 80034fc:	20000484 	.word	0x20000484
 8003500:	20000438 	.word	0x20000438
 8003504:	2000043c 	.word	0x2000043c
 8003508:	20000498 	.word	0x20000498
 800350c:	200004a0 	.word	0x200004a0
 8003510:	20000488 	.word	0x20000488
 8003514:	20000384 	.word	0x20000384
 8003518:	20000380 	.word	0x20000380
 800351c:	20000494 	.word	0x20000494
 8003520:	20000490 	.word	0x20000490

08003524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <vTaskSwitchContext+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <vTaskSwitchContext+0xa8>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003538:	e03f      	b.n	80035ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <vTaskSwitchContext+0xa8>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <vTaskSwitchContext+0xac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f1c3 031f 	rsb	r3, r3, #31
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	491f      	ldr	r1, [pc, #124]	; (80035d4 <vTaskSwitchContext+0xb0>)
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <vTaskSwitchContext+0x5c>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	607b      	str	r3, [r7, #4]
}
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <vTaskSwitchContext+0x5a>
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <vTaskSwitchContext+0xb0>)
 800358c:	4413      	add	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3308      	adds	r3, #8
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d104      	bne.n	80035b0 <vTaskSwitchContext+0x8c>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <vTaskSwitchContext+0xb4>)
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200004a8 	.word	0x200004a8
 80035cc:	20000494 	.word	0x20000494
 80035d0:	20000488 	.word	0x20000488
 80035d4:	20000384 	.word	0x20000384
 80035d8:	20000380 	.word	0x20000380

080035dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035e4:	f000 f852 	bl	800368c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <prvIdleTask+0x28>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d9f9      	bls.n	80035e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <prvIdleTask+0x2c>)
 80035f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003600:	e7f0      	b.n	80035e4 <prvIdleTask+0x8>
 8003602:	bf00      	nop
 8003604:	20000384 	.word	0x20000384
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	e00c      	b.n	8003632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <prvInitialiseTaskLists+0x60>)
 8003624:	4413      	add	r3, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f91a 	bl	8002860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d9ef      	bls.n	8003618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <prvInitialiseTaskLists+0x64>)
 800363a:	f7ff f911 	bl	8002860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800363e:	480d      	ldr	r0, [pc, #52]	; (8003674 <prvInitialiseTaskLists+0x68>)
 8003640:	f7ff f90e 	bl	8002860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003644:	480c      	ldr	r0, [pc, #48]	; (8003678 <prvInitialiseTaskLists+0x6c>)
 8003646:	f7ff f90b 	bl	8002860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <prvInitialiseTaskLists+0x70>)
 800364c:	f7ff f908 	bl	8002860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003650:	480b      	ldr	r0, [pc, #44]	; (8003680 <prvInitialiseTaskLists+0x74>)
 8003652:	f7ff f905 	bl	8002860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <prvInitialiseTaskLists+0x78>)
 8003658:	4a05      	ldr	r2, [pc, #20]	; (8003670 <prvInitialiseTaskLists+0x64>)
 800365a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <prvInitialiseTaskLists+0x7c>)
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <prvInitialiseTaskLists+0x68>)
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000384 	.word	0x20000384
 8003670:	20000410 	.word	0x20000410
 8003674:	20000424 	.word	0x20000424
 8003678:	20000440 	.word	0x20000440
 800367c:	20000454 	.word	0x20000454
 8003680:	2000046c 	.word	0x2000046c
 8003684:	20000438 	.word	0x20000438
 8003688:	2000043c 	.word	0x2000043c

0800368c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003692:	e019      	b.n	80036c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003694:	f000 fa0e 	bl	8003ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <prvCheckTasksWaitingTermination+0x50>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f965 	bl	8002974 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <prvCheckTasksWaitingTermination+0x54>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <prvCheckTasksWaitingTermination+0x54>)
 80036b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <prvCheckTasksWaitingTermination+0x58>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <prvCheckTasksWaitingTermination+0x58>)
 80036bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036be:	f000 fa29 	bl	8003b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f810 	bl	80036e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <prvCheckTasksWaitingTermination+0x58>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e1      	bne.n	8003694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000454 	.word	0x20000454
 80036e0:	20000480 	.word	0x20000480
 80036e4:	20000468 	.word	0x20000468

080036e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fbc6 	bl	8003e90 <vPortFree>
				vPortFree( pxTCB );
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fbc3 	bl	8003e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800370a:	e018      	b.n	800373e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003712:	2b01      	cmp	r3, #1
 8003714:	d103      	bne.n	800371e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fbba 	bl	8003e90 <vPortFree>
	}
 800371c:	e00f      	b.n	800373e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	2b02      	cmp	r3, #2
 8003726:	d00a      	beq.n	800373e <prvDeleteTCB+0x56>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60fb      	str	r3, [r7, #12]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <prvDeleteTCB+0x54>
	}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <prvResetNextTaskUnblockTime+0x38>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <prvResetNextTaskUnblockTime+0x3c>)
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003760:	e008      	b.n	8003774 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <prvResetNextTaskUnblockTime+0x38>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <prvResetNextTaskUnblockTime+0x3c>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000438 	.word	0x20000438
 8003784:	200004a0 	.word	0x200004a0

08003788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f8e8 	bl	8002974 <uxListRemove>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4013      	ands	r3, r2
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d10a      	bne.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	481a      	ldr	r0, [pc, #104]	; (8003844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037da:	f7ff f86e 	bl	80028ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037de:	e026      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d209      	bcs.n	800380c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff f87c 	bl	8002902 <vListInsert>
}
 800380a:	e010      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <prvAddCurrentTaskToDelayedList+0xc4>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff f872 	bl	8002902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	d202      	bcs.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000484 	.word	0x20000484
 800383c:	20000380 	.word	0x20000380
 8003840:	20000488 	.word	0x20000488
 8003844:	2000046c 	.word	0x2000046c
 8003848:	2000043c 	.word	0x2000043c
 800384c:	20000438 	.word	0x20000438
 8003850:	200004a0 	.word	0x200004a0

08003854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b04      	subs	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800386c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3b04      	subs	r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b04      	subs	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003884:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <pxPortInitialiseStack+0x64>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b14      	subs	r3, #20
 800388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b04      	subs	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f06f 0202 	mvn.w	r2, #2
 80038a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b20      	subs	r3, #32
 80038a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	080038bd 	.word	0x080038bd

080038bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <prvTaskExitError+0x54>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d00a      	beq.n	80038e6 <prvTaskExitError+0x2a>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60fb      	str	r3, [r7, #12]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <prvTaskExitError+0x28>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
}
 80038f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038fa:	bf00      	nop
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0fc      	beq.n	80038fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	2000000c 	.word	0x2000000c
	...

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003948:	4808      	ldr	r0, [pc, #32]	; (800396c <prvPortStartFirstTask+0x24>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8814 	msr	CONTROL, r0
 800395a:	b662      	cpsie	i
 800395c:	b661      	cpsie	f
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	df00      	svc	0
 8003968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800396a:	bf00      	nop
 800396c:	e000ed08 	.word	0xe000ed08

08003970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <xPortStartScheduler+0x120>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <xPortStartScheduler+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10a      	bne.n	8003996 <xPortStartScheduler+0x26>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <xPortStartScheduler+0x120>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <xPortStartScheduler+0x128>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10a      	bne.n	80039b6 <xPortStartScheduler+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <xPortStartScheduler+0x12c>)
 80039b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <xPortStartScheduler+0x130>)
 80039dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e4:	e009      	b.n	80039fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d0ef      	beq.n	80039e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00a      	beq.n	8003a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60bb      	str	r3, [r7, #8]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a5e:	f000 f8dd 	bl	8003c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <xPortStartScheduler+0x13c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a68:	f000 f8fc 	bl	8003c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a78:	f7ff ff66 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a7c:	f7ff fd52 	bl	8003524 <vTaskSwitchContext>
	prvTaskExitError();
 8003a80:	f7ff ff1c 	bl	80038bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000ed00 	.word	0xe000ed00
 8003a94:	410fc271 	.word	0x410fc271
 8003a98:	410fc270 	.word	0x410fc270
 8003a9c:	e000e400 	.word	0xe000e400
 8003aa0:	200004ac 	.word	0x200004ac
 8003aa4:	200004b0 	.word	0x200004b0
 8003aa8:	e000ed20 	.word	0xe000ed20
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	e000ef34 	.word	0xe000ef34

08003ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10f      	bne.n	8003b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <vPortEnterCritical+0x5c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vPortEnterCritical+0x4a>
	}
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <vPortExitCritical+0x50>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <vPortExitCritical+0x24>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	607b      	str	r3, [r7, #4]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vPortExitCritical+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <vPortExitCritical+0x50>)
 8003b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <vPortExitCritical+0x50>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <vPortExitCritical+0x42>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f383 8811 	msr	BASEPRI, r3
}
 8003b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
	...

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff fcc0 	bl	8003524 <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7ff fbdf 	bl	80033b4 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SysTick_Handler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
}
 8003c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <vPortSetupTimerInterrupt+0x44>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010
 8003c54:	e000e018 	.word	0xe000e018
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	10624dd3 	.word	0x10624dd3
 8003c60:	e000e014 	.word	0xe000e014

08003c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c74 <vPortEnableVFP+0x10>
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c6e:	6001      	str	r1, [r0, #0]
 8003c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c72:	bf00      	nop
 8003c74:	e000ed88 	.word	0xe000ed88

08003c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c7e:	f3ef 8305 	mrs	r3, IPSR
 8003c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d914      	bls.n	8003cb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <vPortValidateInterruptPriority+0x70>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <vPortValidateInterruptPriority+0x74>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	7afa      	ldrb	r2, [r7, #11]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d20a      	bcs.n	8003cb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <vPortValidateInterruptPriority+0x78>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <vPortValidateInterruptPriority+0x7c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d90a      	bls.n	8003cda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	603b      	str	r3, [r7, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <vPortValidateInterruptPriority+0x60>
	}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000e3f0 	.word	0xe000e3f0
 8003cec:	200004ac 	.word	0x200004ac
 8003cf0:	e000ed0c 	.word	0xe000ed0c
 8003cf4:	200004b0 	.word	0x200004b0

08003cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d04:	f7ff faac 	bl	8003260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d08:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <pvPortMalloc+0x180>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d10:	f000 f920 	bl	8003f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <pvPortMalloc+0x184>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8093 	bne.w	8003e48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01d      	beq.n	8003d64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d28:	2208      	movs	r2, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f023 0307 	bic.w	r3, r3, #7
 8003d40:	3308      	adds	r3, #8
 8003d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <pvPortMalloc+0x6c>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	617b      	str	r3, [r7, #20]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06e      	beq.n	8003e48 <pvPortMalloc+0x150>
 8003d6a:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <pvPortMalloc+0x188>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d869      	bhi.n	8003e48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <pvPortMalloc+0x18c>)
 8003d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d78:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <pvPortMalloc+0x18c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d7e:	e004      	b.n	8003d8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <pvPortMalloc+0xa4>
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f1      	bne.n	8003d80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <pvPortMalloc+0x180>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d050      	beq.n	8003e48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	4413      	add	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d91f      	bls.n	8003e08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <pvPortMalloc+0xf8>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	613b      	str	r3, [r7, #16]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e02:	69b8      	ldr	r0, [r7, #24]
 8003e04:	f000 f908 	bl	8004018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <pvPortMalloc+0x188>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <pvPortMalloc+0x188>)
 8003e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <pvPortMalloc+0x188>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <pvPortMalloc+0x190>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d203      	bcs.n	8003e2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <pvPortMalloc+0x188>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <pvPortMalloc+0x190>)
 8003e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <pvPortMalloc+0x184>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <pvPortMalloc+0x194>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <pvPortMalloc+0x194>)
 8003e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e48:	f7ff fa18 	bl	800327c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <pvPortMalloc+0x174>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60fb      	str	r3, [r7, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <pvPortMalloc+0x172>
	return pvReturn;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200040bc 	.word	0x200040bc
 8003e7c:	200040d0 	.word	0x200040d0
 8003e80:	200040c0 	.word	0x200040c0
 8003e84:	200040b4 	.word	0x200040b4
 8003e88:	200040c4 	.word	0x200040c4
 8003e8c:	200040c8 	.word	0x200040c8

08003e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d04d      	beq.n	8003f3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <vPortFree+0xb8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <vPortFree+0x44>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <vPortFree+0x62>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60bb      	str	r3, [r7, #8]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <vPortFree+0xb8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01e      	beq.n	8003f3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11a      	bne.n	8003f3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <vPortFree+0xb8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f18:	f7ff f9a2 	bl	8003260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <vPortFree+0xbc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <vPortFree+0xbc>)
 8003f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f2a:	6938      	ldr	r0, [r7, #16]
 8003f2c:	f000 f874 	bl	8004018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <vPortFree+0xc0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <vPortFree+0xc0>)
 8003f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f3a:	f7ff f99f 	bl	800327c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200040d0 	.word	0x200040d0
 8003f4c:	200040c0 	.word	0x200040c0
 8003f50:	200040cc 	.word	0x200040cc

08003f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <prvHeapInit+0xac>)
 8003f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3307      	adds	r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <prvHeapInit+0xac>)
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <prvHeapInit+0xb0>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <prvHeapInit+0xb0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <prvHeapInit+0xb4>)
 8003fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <prvHeapInit+0xb4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <prvHeapInit+0xb4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <prvHeapInit+0xb4>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <prvHeapInit+0xb8>)
 8003fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <prvHeapInit+0xbc>)
 8003fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <prvHeapInit+0xc0>)
 8003fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200004b4 	.word	0x200004b4
 8004004:	200040b4 	.word	0x200040b4
 8004008:	200040bc 	.word	0x200040bc
 800400c:	200040c4 	.word	0x200040c4
 8004010:	200040c0 	.word	0x200040c0
 8004014:	200040d0 	.word	0x200040d0

08004018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <prvInsertBlockIntoFreeList+0xac>)
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e002      	b.n	800402c <prvInsertBlockIntoFreeList+0x14>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d8f7      	bhi.n	8004026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d108      	bne.n	800405a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	441a      	add	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d118      	bne.n	80040a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d00d      	beq.n	8004096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	441a      	add	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e008      	b.n	80040a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e003      	b.n	80040a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d002      	beq.n	80040b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200040b4 	.word	0x200040b4
 80040c8:	200040bc 	.word	0x200040bc

080040cc <std>:
 80040cc:	2300      	movs	r3, #0
 80040ce:	b510      	push	{r4, lr}
 80040d0:	4604      	mov	r4, r0
 80040d2:	e9c0 3300 	strd	r3, r3, [r0]
 80040d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040da:	6083      	str	r3, [r0, #8]
 80040dc:	8181      	strh	r1, [r0, #12]
 80040de:	6643      	str	r3, [r0, #100]	; 0x64
 80040e0:	81c2      	strh	r2, [r0, #14]
 80040e2:	6183      	str	r3, [r0, #24]
 80040e4:	4619      	mov	r1, r3
 80040e6:	2208      	movs	r2, #8
 80040e8:	305c      	adds	r0, #92	; 0x5c
 80040ea:	f000 f9f7 	bl	80044dc <memset>
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <std+0x58>)
 80040f0:	6263      	str	r3, [r4, #36]	; 0x24
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <std+0x5c>)
 80040f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <std+0x60>)
 80040f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <std+0x64>)
 80040fc:	6323      	str	r3, [r4, #48]	; 0x30
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <std+0x68>)
 8004100:	6224      	str	r4, [r4, #32]
 8004102:	429c      	cmp	r4, r3
 8004104:	d006      	beq.n	8004114 <std+0x48>
 8004106:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800410a:	4294      	cmp	r4, r2
 800410c:	d002      	beq.n	8004114 <std+0x48>
 800410e:	33d0      	adds	r3, #208	; 0xd0
 8004110:	429c      	cmp	r4, r3
 8004112:	d105      	bne.n	8004120 <std+0x54>
 8004114:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411c:	f000 ba56 	b.w	80045cc <__retarget_lock_init_recursive>
 8004120:	bd10      	pop	{r4, pc}
 8004122:	bf00      	nop
 8004124:	0800432d 	.word	0x0800432d
 8004128:	0800434f 	.word	0x0800434f
 800412c:	08004387 	.word	0x08004387
 8004130:	080043ab 	.word	0x080043ab
 8004134:	200040d4 	.word	0x200040d4

08004138 <stdio_exit_handler>:
 8004138:	4a02      	ldr	r2, [pc, #8]	; (8004144 <stdio_exit_handler+0xc>)
 800413a:	4903      	ldr	r1, [pc, #12]	; (8004148 <stdio_exit_handler+0x10>)
 800413c:	4803      	ldr	r0, [pc, #12]	; (800414c <stdio_exit_handler+0x14>)
 800413e:	f000 b869 	b.w	8004214 <_fwalk_sglue>
 8004142:	bf00      	nop
 8004144:	20000010 	.word	0x20000010
 8004148:	08004e79 	.word	0x08004e79
 800414c:	2000001c 	.word	0x2000001c

08004150 <cleanup_stdio>:
 8004150:	6841      	ldr	r1, [r0, #4]
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <cleanup_stdio+0x34>)
 8004154:	4299      	cmp	r1, r3
 8004156:	b510      	push	{r4, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	d001      	beq.n	8004160 <cleanup_stdio+0x10>
 800415c:	f000 fe8c 	bl	8004e78 <_fflush_r>
 8004160:	68a1      	ldr	r1, [r4, #8]
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <cleanup_stdio+0x38>)
 8004164:	4299      	cmp	r1, r3
 8004166:	d002      	beq.n	800416e <cleanup_stdio+0x1e>
 8004168:	4620      	mov	r0, r4
 800416a:	f000 fe85 	bl	8004e78 <_fflush_r>
 800416e:	68e1      	ldr	r1, [r4, #12]
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <cleanup_stdio+0x3c>)
 8004172:	4299      	cmp	r1, r3
 8004174:	d004      	beq.n	8004180 <cleanup_stdio+0x30>
 8004176:	4620      	mov	r0, r4
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800417c:	f000 be7c 	b.w	8004e78 <_fflush_r>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	bf00      	nop
 8004184:	200040d4 	.word	0x200040d4
 8004188:	2000413c 	.word	0x2000413c
 800418c:	200041a4 	.word	0x200041a4

08004190 <global_stdio_init.part.0>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <global_stdio_init.part.0+0x30>)
 8004194:	4c0b      	ldr	r4, [pc, #44]	; (80041c4 <global_stdio_init.part.0+0x34>)
 8004196:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <global_stdio_init.part.0+0x38>)
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	4620      	mov	r0, r4
 800419c:	2200      	movs	r2, #0
 800419e:	2104      	movs	r1, #4
 80041a0:	f7ff ff94 	bl	80040cc <std>
 80041a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041a8:	2201      	movs	r2, #1
 80041aa:	2109      	movs	r1, #9
 80041ac:	f7ff ff8e 	bl	80040cc <std>
 80041b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041b4:	2202      	movs	r2, #2
 80041b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ba:	2112      	movs	r1, #18
 80041bc:	f7ff bf86 	b.w	80040cc <std>
 80041c0:	2000420c 	.word	0x2000420c
 80041c4:	200040d4 	.word	0x200040d4
 80041c8:	08004139 	.word	0x08004139

080041cc <__sfp_lock_acquire>:
 80041cc:	4801      	ldr	r0, [pc, #4]	; (80041d4 <__sfp_lock_acquire+0x8>)
 80041ce:	f000 b9fe 	b.w	80045ce <__retarget_lock_acquire_recursive>
 80041d2:	bf00      	nop
 80041d4:	20004215 	.word	0x20004215

080041d8 <__sfp_lock_release>:
 80041d8:	4801      	ldr	r0, [pc, #4]	; (80041e0 <__sfp_lock_release+0x8>)
 80041da:	f000 b9f9 	b.w	80045d0 <__retarget_lock_release_recursive>
 80041de:	bf00      	nop
 80041e0:	20004215 	.word	0x20004215

080041e4 <__sinit>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	f7ff fff0 	bl	80041cc <__sfp_lock_acquire>
 80041ec:	6a23      	ldr	r3, [r4, #32]
 80041ee:	b11b      	cbz	r3, 80041f8 <__sinit+0x14>
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	f7ff bff0 	b.w	80041d8 <__sfp_lock_release>
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__sinit+0x28>)
 80041fa:	6223      	str	r3, [r4, #32]
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__sinit+0x2c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f5      	bne.n	80041f0 <__sinit+0xc>
 8004204:	f7ff ffc4 	bl	8004190 <global_stdio_init.part.0>
 8004208:	e7f2      	b.n	80041f0 <__sinit+0xc>
 800420a:	bf00      	nop
 800420c:	08004151 	.word	0x08004151
 8004210:	2000420c 	.word	0x2000420c

08004214 <_fwalk_sglue>:
 8004214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004218:	4607      	mov	r7, r0
 800421a:	4688      	mov	r8, r1
 800421c:	4614      	mov	r4, r2
 800421e:	2600      	movs	r6, #0
 8004220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004224:	f1b9 0901 	subs.w	r9, r9, #1
 8004228:	d505      	bpl.n	8004236 <_fwalk_sglue+0x22>
 800422a:	6824      	ldr	r4, [r4, #0]
 800422c:	2c00      	cmp	r4, #0
 800422e:	d1f7      	bne.n	8004220 <_fwalk_sglue+0xc>
 8004230:	4630      	mov	r0, r6
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	89ab      	ldrh	r3, [r5, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d907      	bls.n	800424c <_fwalk_sglue+0x38>
 800423c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004240:	3301      	adds	r3, #1
 8004242:	d003      	beq.n	800424c <_fwalk_sglue+0x38>
 8004244:	4629      	mov	r1, r5
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	4306      	orrs	r6, r0
 800424c:	3568      	adds	r5, #104	; 0x68
 800424e:	e7e9      	b.n	8004224 <_fwalk_sglue+0x10>

08004250 <iprintf>:
 8004250:	b40f      	push	{r0, r1, r2, r3}
 8004252:	b507      	push	{r0, r1, r2, lr}
 8004254:	4906      	ldr	r1, [pc, #24]	; (8004270 <iprintf+0x20>)
 8004256:	ab04      	add	r3, sp, #16
 8004258:	6808      	ldr	r0, [r1, #0]
 800425a:	f853 2b04 	ldr.w	r2, [r3], #4
 800425e:	6881      	ldr	r1, [r0, #8]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f000 fad9 	bl	8004818 <_vfiprintf_r>
 8004266:	b003      	add	sp, #12
 8004268:	f85d eb04 	ldr.w	lr, [sp], #4
 800426c:	b004      	add	sp, #16
 800426e:	4770      	bx	lr
 8004270:	20000068 	.word	0x20000068

08004274 <_puts_r>:
 8004274:	6a03      	ldr	r3, [r0, #32]
 8004276:	b570      	push	{r4, r5, r6, lr}
 8004278:	6884      	ldr	r4, [r0, #8]
 800427a:	4605      	mov	r5, r0
 800427c:	460e      	mov	r6, r1
 800427e:	b90b      	cbnz	r3, 8004284 <_puts_r+0x10>
 8004280:	f7ff ffb0 	bl	80041e4 <__sinit>
 8004284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004286:	07db      	lsls	r3, r3, #31
 8004288:	d405      	bmi.n	8004296 <_puts_r+0x22>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	0598      	lsls	r0, r3, #22
 800428e:	d402      	bmi.n	8004296 <_puts_r+0x22>
 8004290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004292:	f000 f99c 	bl	80045ce <__retarget_lock_acquire_recursive>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	0719      	lsls	r1, r3, #28
 800429a:	d513      	bpl.n	80042c4 <_puts_r+0x50>
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b18b      	cbz	r3, 80042c4 <_puts_r+0x50>
 80042a0:	3e01      	subs	r6, #1
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	b9e9      	cbnz	r1, 80042ea <_puts_r+0x76>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da2e      	bge.n	8004310 <_puts_r+0x9c>
 80042b2:	4622      	mov	r2, r4
 80042b4:	210a      	movs	r1, #10
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f87b 	bl	80043b2 <__swbuf_r>
 80042bc:	3001      	adds	r0, #1
 80042be:	d007      	beq.n	80042d0 <_puts_r+0x5c>
 80042c0:	250a      	movs	r5, #10
 80042c2:	e007      	b.n	80042d4 <_puts_r+0x60>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 f8b0 	bl	800442c <__swsetup_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d0e7      	beq.n	80042a0 <_puts_r+0x2c>
 80042d0:	f04f 35ff 	mov.w	r5, #4294967295
 80042d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042d6:	07da      	lsls	r2, r3, #31
 80042d8:	d405      	bmi.n	80042e6 <_puts_r+0x72>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	059b      	lsls	r3, r3, #22
 80042de:	d402      	bmi.n	80042e6 <_puts_r+0x72>
 80042e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e2:	f000 f975 	bl	80045d0 <__retarget_lock_release_recursive>
 80042e6:	4628      	mov	r0, r5
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da04      	bge.n	80042f8 <_puts_r+0x84>
 80042ee:	69a2      	ldr	r2, [r4, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dc06      	bgt.n	8004302 <_puts_r+0x8e>
 80042f4:	290a      	cmp	r1, #10
 80042f6:	d004      	beq.n	8004302 <_puts_r+0x8e>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	7019      	strb	r1, [r3, #0]
 8004300:	e7cf      	b.n	80042a2 <_puts_r+0x2e>
 8004302:	4622      	mov	r2, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f854 	bl	80043b2 <__swbuf_r>
 800430a:	3001      	adds	r0, #1
 800430c:	d1c9      	bne.n	80042a2 <_puts_r+0x2e>
 800430e:	e7df      	b.n	80042d0 <_puts_r+0x5c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	250a      	movs	r5, #10
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	701d      	strb	r5, [r3, #0]
 800431a:	e7db      	b.n	80042d4 <_puts_r+0x60>

0800431c <puts>:
 800431c:	4b02      	ldr	r3, [pc, #8]	; (8004328 <puts+0xc>)
 800431e:	4601      	mov	r1, r0
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	f7ff bfa7 	b.w	8004274 <_puts_r>
 8004326:	bf00      	nop
 8004328:	20000068 	.word	0x20000068

0800432c <__sread>:
 800432c:	b510      	push	{r4, lr}
 800432e:	460c      	mov	r4, r1
 8004330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004334:	f000 f8fc 	bl	8004530 <_read_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	bfab      	itete	ge
 800433c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800433e:	89a3      	ldrhlt	r3, [r4, #12]
 8004340:	181b      	addge	r3, r3, r0
 8004342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004346:	bfac      	ite	ge
 8004348:	6563      	strge	r3, [r4, #84]	; 0x54
 800434a:	81a3      	strhlt	r3, [r4, #12]
 800434c:	bd10      	pop	{r4, pc}

0800434e <__swrite>:
 800434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	461f      	mov	r7, r3
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	05db      	lsls	r3, r3, #23
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	4616      	mov	r6, r2
 800435e:	d505      	bpl.n	800436c <__swrite+0x1e>
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	2302      	movs	r3, #2
 8004366:	2200      	movs	r2, #0
 8004368:	f000 f8d0 	bl	800450c <_lseek_r>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	4632      	mov	r2, r6
 800437a:	463b      	mov	r3, r7
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	f000 b8e7 	b.w	8004554 <_write_r>

08004386 <__sseek>:
 8004386:	b510      	push	{r4, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438e:	f000 f8bd 	bl	800450c <_lseek_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	bf15      	itete	ne
 8004398:	6560      	strne	r0, [r4, #84]	; 0x54
 800439a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800439e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043a2:	81a3      	strheq	r3, [r4, #12]
 80043a4:	bf18      	it	ne
 80043a6:	81a3      	strhne	r3, [r4, #12]
 80043a8:	bd10      	pop	{r4, pc}

080043aa <__sclose>:
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 b89d 	b.w	80044ec <_close_r>

080043b2 <__swbuf_r>:
 80043b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b4:	460e      	mov	r6, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	4605      	mov	r5, r0
 80043ba:	b118      	cbz	r0, 80043c4 <__swbuf_r+0x12>
 80043bc:	6a03      	ldr	r3, [r0, #32]
 80043be:	b90b      	cbnz	r3, 80043c4 <__swbuf_r+0x12>
 80043c0:	f7ff ff10 	bl	80041e4 <__sinit>
 80043c4:	69a3      	ldr	r3, [r4, #24]
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	071a      	lsls	r2, r3, #28
 80043cc:	d525      	bpl.n	800441a <__swbuf_r+0x68>
 80043ce:	6923      	ldr	r3, [r4, #16]
 80043d0:	b31b      	cbz	r3, 800441a <__swbuf_r+0x68>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	6922      	ldr	r2, [r4, #16]
 80043d6:	1a98      	subs	r0, r3, r2
 80043d8:	6963      	ldr	r3, [r4, #20]
 80043da:	b2f6      	uxtb	r6, r6
 80043dc:	4283      	cmp	r3, r0
 80043de:	4637      	mov	r7, r6
 80043e0:	dc04      	bgt.n	80043ec <__swbuf_r+0x3a>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 fd47 	bl	8004e78 <_fflush_r>
 80043ea:	b9e0      	cbnz	r0, 8004426 <__swbuf_r+0x74>
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	60a3      	str	r3, [r4, #8]
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	6022      	str	r2, [r4, #0]
 80043f8:	701e      	strb	r6, [r3, #0]
 80043fa:	6962      	ldr	r2, [r4, #20]
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	429a      	cmp	r2, r3
 8004400:	d004      	beq.n	800440c <__swbuf_r+0x5a>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	07db      	lsls	r3, r3, #31
 8004406:	d506      	bpl.n	8004416 <__swbuf_r+0x64>
 8004408:	2e0a      	cmp	r6, #10
 800440a:	d104      	bne.n	8004416 <__swbuf_r+0x64>
 800440c:	4621      	mov	r1, r4
 800440e:	4628      	mov	r0, r5
 8004410:	f000 fd32 	bl	8004e78 <_fflush_r>
 8004414:	b938      	cbnz	r0, 8004426 <__swbuf_r+0x74>
 8004416:	4638      	mov	r0, r7
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f805 	bl	800442c <__swsetup_r>
 8004422:	2800      	cmp	r0, #0
 8004424:	d0d5      	beq.n	80043d2 <__swbuf_r+0x20>
 8004426:	f04f 37ff 	mov.w	r7, #4294967295
 800442a:	e7f4      	b.n	8004416 <__swbuf_r+0x64>

0800442c <__swsetup_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <__swsetup_r+0xac>)
 8004430:	4605      	mov	r5, r0
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	460c      	mov	r4, r1
 8004436:	b118      	cbz	r0, 8004440 <__swsetup_r+0x14>
 8004438:	6a03      	ldr	r3, [r0, #32]
 800443a:	b90b      	cbnz	r3, 8004440 <__swsetup_r+0x14>
 800443c:	f7ff fed2 	bl	80041e4 <__sinit>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004446:	0718      	lsls	r0, r3, #28
 8004448:	d422      	bmi.n	8004490 <__swsetup_r+0x64>
 800444a:	06d9      	lsls	r1, r3, #27
 800444c:	d407      	bmi.n	800445e <__swsetup_r+0x32>
 800444e:	2309      	movs	r3, #9
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e034      	b.n	80044c8 <__swsetup_r+0x9c>
 800445e:	0758      	lsls	r0, r3, #29
 8004460:	d512      	bpl.n	8004488 <__swsetup_r+0x5c>
 8004462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004464:	b141      	cbz	r1, 8004478 <__swsetup_r+0x4c>
 8004466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446a:	4299      	cmp	r1, r3
 800446c:	d002      	beq.n	8004474 <__swsetup_r+0x48>
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f8b0 	bl	80045d4 <_free_r>
 8004474:	2300      	movs	r3, #0
 8004476:	6363      	str	r3, [r4, #52]	; 0x34
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	2300      	movs	r3, #0
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	b94b      	cbnz	r3, 80044a8 <__swsetup_r+0x7c>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800449a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449e:	d003      	beq.n	80044a8 <__swsetup_r+0x7c>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 fd36 	bl	8004f14 <__smakebuf_r>
 80044a8:	89a0      	ldrh	r0, [r4, #12]
 80044aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ae:	f010 0301 	ands.w	r3, r0, #1
 80044b2:	d00a      	beq.n	80044ca <__swsetup_r+0x9e>
 80044b4:	2300      	movs	r3, #0
 80044b6:	60a3      	str	r3, [r4, #8]
 80044b8:	6963      	ldr	r3, [r4, #20]
 80044ba:	425b      	negs	r3, r3
 80044bc:	61a3      	str	r3, [r4, #24]
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	b943      	cbnz	r3, 80044d4 <__swsetup_r+0xa8>
 80044c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044c6:	d1c4      	bne.n	8004452 <__swsetup_r+0x26>
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	0781      	lsls	r1, r0, #30
 80044cc:	bf58      	it	pl
 80044ce:	6963      	ldrpl	r3, [r4, #20]
 80044d0:	60a3      	str	r3, [r4, #8]
 80044d2:	e7f4      	b.n	80044be <__swsetup_r+0x92>
 80044d4:	2000      	movs	r0, #0
 80044d6:	e7f7      	b.n	80044c8 <__swsetup_r+0x9c>
 80044d8:	20000068 	.word	0x20000068

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <_close_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4d06      	ldr	r5, [pc, #24]	; (8004508 <_close_r+0x1c>)
 80044f0:	2300      	movs	r3, #0
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	f7fc fb7b 	bl	8000bf2 <_close>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_close_r+0x1a>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_close_r+0x1a>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20004210 	.word	0x20004210

0800450c <_lseek_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d07      	ldr	r5, [pc, #28]	; (800452c <_lseek_r+0x20>)
 8004510:	4604      	mov	r4, r0
 8004512:	4608      	mov	r0, r1
 8004514:	4611      	mov	r1, r2
 8004516:	2200      	movs	r2, #0
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	f7fc fb90 	bl	8000c40 <_lseek>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_lseek_r+0x1e>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_lseek_r+0x1e>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	20004210 	.word	0x20004210

08004530 <_read_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d07      	ldr	r5, [pc, #28]	; (8004550 <_read_r+0x20>)
 8004534:	4604      	mov	r4, r0
 8004536:	4608      	mov	r0, r1
 8004538:	4611      	mov	r1, r2
 800453a:	2200      	movs	r2, #0
 800453c:	602a      	str	r2, [r5, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	f7fc fb3a 	bl	8000bb8 <_read>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_read_r+0x1e>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_read_r+0x1e>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20004210 	.word	0x20004210

08004554 <_write_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d07      	ldr	r5, [pc, #28]	; (8004574 <_write_r+0x20>)
 8004558:	4604      	mov	r4, r0
 800455a:	4608      	mov	r0, r1
 800455c:	4611      	mov	r1, r2
 800455e:	2200      	movs	r2, #0
 8004560:	602a      	str	r2, [r5, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f7fc f990 	bl	8000888 <_write>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_write_r+0x1e>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_write_r+0x1e>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20004210 	.word	0x20004210

08004578 <__errno>:
 8004578:	4b01      	ldr	r3, [pc, #4]	; (8004580 <__errno+0x8>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000068 	.word	0x20000068

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4d0d      	ldr	r5, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1b64      	subs	r4, r4, r5
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2600      	movs	r6, #0
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f000 fd2a 	bl	8004ff0 <_init>
 800459c:	1b64      	subs	r4, r4, r5
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2600      	movs	r6, #0
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	08005118 	.word	0x08005118
 80045c0:	08005118 	.word	0x08005118
 80045c4:	08005118 	.word	0x08005118
 80045c8:	0800511c 	.word	0x0800511c

080045cc <__retarget_lock_init_recursive>:
 80045cc:	4770      	bx	lr

080045ce <__retarget_lock_acquire_recursive>:
 80045ce:	4770      	bx	lr

080045d0 <__retarget_lock_release_recursive>:
 80045d0:	4770      	bx	lr
	...

080045d4 <_free_r>:
 80045d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045d6:	2900      	cmp	r1, #0
 80045d8:	d044      	beq.n	8004664 <_free_r+0x90>
 80045da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045de:	9001      	str	r0, [sp, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f1a1 0404 	sub.w	r4, r1, #4
 80045e6:	bfb8      	it	lt
 80045e8:	18e4      	addlt	r4, r4, r3
 80045ea:	f000 f8df 	bl	80047ac <__malloc_lock>
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <_free_r+0x94>)
 80045f0:	9801      	ldr	r0, [sp, #4]
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	b933      	cbnz	r3, 8004604 <_free_r+0x30>
 80045f6:	6063      	str	r3, [r4, #4]
 80045f8:	6014      	str	r4, [r2, #0]
 80045fa:	b003      	add	sp, #12
 80045fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004600:	f000 b8da 	b.w	80047b8 <__malloc_unlock>
 8004604:	42a3      	cmp	r3, r4
 8004606:	d908      	bls.n	800461a <_free_r+0x46>
 8004608:	6825      	ldr	r5, [r4, #0]
 800460a:	1961      	adds	r1, r4, r5
 800460c:	428b      	cmp	r3, r1
 800460e:	bf01      	itttt	eq
 8004610:	6819      	ldreq	r1, [r3, #0]
 8004612:	685b      	ldreq	r3, [r3, #4]
 8004614:	1949      	addeq	r1, r1, r5
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	e7ed      	b.n	80045f6 <_free_r+0x22>
 800461a:	461a      	mov	r2, r3
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b10b      	cbz	r3, 8004624 <_free_r+0x50>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d9fa      	bls.n	800461a <_free_r+0x46>
 8004624:	6811      	ldr	r1, [r2, #0]
 8004626:	1855      	adds	r5, r2, r1
 8004628:	42a5      	cmp	r5, r4
 800462a:	d10b      	bne.n	8004644 <_free_r+0x70>
 800462c:	6824      	ldr	r4, [r4, #0]
 800462e:	4421      	add	r1, r4
 8004630:	1854      	adds	r4, r2, r1
 8004632:	42a3      	cmp	r3, r4
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	d1e0      	bne.n	80045fa <_free_r+0x26>
 8004638:	681c      	ldr	r4, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	6053      	str	r3, [r2, #4]
 800463e:	440c      	add	r4, r1
 8004640:	6014      	str	r4, [r2, #0]
 8004642:	e7da      	b.n	80045fa <_free_r+0x26>
 8004644:	d902      	bls.n	800464c <_free_r+0x78>
 8004646:	230c      	movs	r3, #12
 8004648:	6003      	str	r3, [r0, #0]
 800464a:	e7d6      	b.n	80045fa <_free_r+0x26>
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	1961      	adds	r1, r4, r5
 8004650:	428b      	cmp	r3, r1
 8004652:	bf04      	itt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	6063      	str	r3, [r4, #4]
 800465a:	bf04      	itt	eq
 800465c:	1949      	addeq	r1, r1, r5
 800465e:	6021      	streq	r1, [r4, #0]
 8004660:	6054      	str	r4, [r2, #4]
 8004662:	e7ca      	b.n	80045fa <_free_r+0x26>
 8004664:	b003      	add	sp, #12
 8004666:	bd30      	pop	{r4, r5, pc}
 8004668:	20004218 	.word	0x20004218

0800466c <sbrk_aligned>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4e0e      	ldr	r6, [pc, #56]	; (80046a8 <sbrk_aligned+0x3c>)
 8004670:	460c      	mov	r4, r1
 8004672:	6831      	ldr	r1, [r6, #0]
 8004674:	4605      	mov	r5, r0
 8004676:	b911      	cbnz	r1, 800467e <sbrk_aligned+0x12>
 8004678:	f000 fcaa 	bl	8004fd0 <_sbrk_r>
 800467c:	6030      	str	r0, [r6, #0]
 800467e:	4621      	mov	r1, r4
 8004680:	4628      	mov	r0, r5
 8004682:	f000 fca5 	bl	8004fd0 <_sbrk_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d00a      	beq.n	80046a0 <sbrk_aligned+0x34>
 800468a:	1cc4      	adds	r4, r0, #3
 800468c:	f024 0403 	bic.w	r4, r4, #3
 8004690:	42a0      	cmp	r0, r4
 8004692:	d007      	beq.n	80046a4 <sbrk_aligned+0x38>
 8004694:	1a21      	subs	r1, r4, r0
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fc9a 	bl	8004fd0 <_sbrk_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d101      	bne.n	80046a4 <sbrk_aligned+0x38>
 80046a0:	f04f 34ff 	mov.w	r4, #4294967295
 80046a4:	4620      	mov	r0, r4
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	2000421c 	.word	0x2000421c

080046ac <_malloc_r>:
 80046ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b0:	1ccd      	adds	r5, r1, #3
 80046b2:	f025 0503 	bic.w	r5, r5, #3
 80046b6:	3508      	adds	r5, #8
 80046b8:	2d0c      	cmp	r5, #12
 80046ba:	bf38      	it	cc
 80046bc:	250c      	movcc	r5, #12
 80046be:	2d00      	cmp	r5, #0
 80046c0:	4607      	mov	r7, r0
 80046c2:	db01      	blt.n	80046c8 <_malloc_r+0x1c>
 80046c4:	42a9      	cmp	r1, r5
 80046c6:	d905      	bls.n	80046d4 <_malloc_r+0x28>
 80046c8:	230c      	movs	r3, #12
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	2600      	movs	r6, #0
 80046ce:	4630      	mov	r0, r6
 80046d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047a8 <_malloc_r+0xfc>
 80046d8:	f000 f868 	bl	80047ac <__malloc_lock>
 80046dc:	f8d8 3000 	ldr.w	r3, [r8]
 80046e0:	461c      	mov	r4, r3
 80046e2:	bb5c      	cbnz	r4, 800473c <_malloc_r+0x90>
 80046e4:	4629      	mov	r1, r5
 80046e6:	4638      	mov	r0, r7
 80046e8:	f7ff ffc0 	bl	800466c <sbrk_aligned>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	4604      	mov	r4, r0
 80046f0:	d155      	bne.n	800479e <_malloc_r+0xf2>
 80046f2:	f8d8 4000 	ldr.w	r4, [r8]
 80046f6:	4626      	mov	r6, r4
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	d145      	bne.n	8004788 <_malloc_r+0xdc>
 80046fc:	2c00      	cmp	r4, #0
 80046fe:	d048      	beq.n	8004792 <_malloc_r+0xe6>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	4631      	mov	r1, r6
 8004704:	4638      	mov	r0, r7
 8004706:	eb04 0903 	add.w	r9, r4, r3
 800470a:	f000 fc61 	bl	8004fd0 <_sbrk_r>
 800470e:	4581      	cmp	r9, r0
 8004710:	d13f      	bne.n	8004792 <_malloc_r+0xe6>
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	1a6d      	subs	r5, r5, r1
 8004716:	4629      	mov	r1, r5
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff ffa7 	bl	800466c <sbrk_aligned>
 800471e:	3001      	adds	r0, #1
 8004720:	d037      	beq.n	8004792 <_malloc_r+0xe6>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	442b      	add	r3, r5
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	f8d8 3000 	ldr.w	r3, [r8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d038      	beq.n	80047a2 <_malloc_r+0xf6>
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	42a2      	cmp	r2, r4
 8004734:	d12b      	bne.n	800478e <_malloc_r+0xe2>
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	e00f      	b.n	800475c <_malloc_r+0xb0>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	1b52      	subs	r2, r2, r5
 8004740:	d41f      	bmi.n	8004782 <_malloc_r+0xd6>
 8004742:	2a0b      	cmp	r2, #11
 8004744:	d917      	bls.n	8004776 <_malloc_r+0xca>
 8004746:	1961      	adds	r1, r4, r5
 8004748:	42a3      	cmp	r3, r4
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	6059      	strne	r1, [r3, #4]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	bf08      	it	eq
 8004754:	f8c8 1000 	streq.w	r1, [r8]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4638      	mov	r0, r7
 800475e:	f104 060b 	add.w	r6, r4, #11
 8004762:	f000 f829 	bl	80047b8 <__malloc_unlock>
 8004766:	f026 0607 	bic.w	r6, r6, #7
 800476a:	1d23      	adds	r3, r4, #4
 800476c:	1af2      	subs	r2, r6, r3
 800476e:	d0ae      	beq.n	80046ce <_malloc_r+0x22>
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	50a3      	str	r3, [r4, r2]
 8004774:	e7ab      	b.n	80046ce <_malloc_r+0x22>
 8004776:	42a3      	cmp	r3, r4
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	d1dd      	bne.n	8004738 <_malloc_r+0x8c>
 800477c:	f8c8 2000 	str.w	r2, [r8]
 8004780:	e7ec      	b.n	800475c <_malloc_r+0xb0>
 8004782:	4623      	mov	r3, r4
 8004784:	6864      	ldr	r4, [r4, #4]
 8004786:	e7ac      	b.n	80046e2 <_malloc_r+0x36>
 8004788:	4634      	mov	r4, r6
 800478a:	6876      	ldr	r6, [r6, #4]
 800478c:	e7b4      	b.n	80046f8 <_malloc_r+0x4c>
 800478e:	4613      	mov	r3, r2
 8004790:	e7cc      	b.n	800472c <_malloc_r+0x80>
 8004792:	230c      	movs	r3, #12
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4638      	mov	r0, r7
 8004798:	f000 f80e 	bl	80047b8 <__malloc_unlock>
 800479c:	e797      	b.n	80046ce <_malloc_r+0x22>
 800479e:	6025      	str	r5, [r4, #0]
 80047a0:	e7dc      	b.n	800475c <_malloc_r+0xb0>
 80047a2:	605b      	str	r3, [r3, #4]
 80047a4:	deff      	udf	#255	; 0xff
 80047a6:	bf00      	nop
 80047a8:	20004218 	.word	0x20004218

080047ac <__malloc_lock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__malloc_lock+0x8>)
 80047ae:	f7ff bf0e 	b.w	80045ce <__retarget_lock_acquire_recursive>
 80047b2:	bf00      	nop
 80047b4:	20004214 	.word	0x20004214

080047b8 <__malloc_unlock>:
 80047b8:	4801      	ldr	r0, [pc, #4]	; (80047c0 <__malloc_unlock+0x8>)
 80047ba:	f7ff bf09 	b.w	80045d0 <__retarget_lock_release_recursive>
 80047be:	bf00      	nop
 80047c0:	20004214 	.word	0x20004214

080047c4 <__sfputc_r>:
 80047c4:	6893      	ldr	r3, [r2, #8]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	b410      	push	{r4}
 80047cc:	6093      	str	r3, [r2, #8]
 80047ce:	da08      	bge.n	80047e2 <__sfputc_r+0x1e>
 80047d0:	6994      	ldr	r4, [r2, #24]
 80047d2:	42a3      	cmp	r3, r4
 80047d4:	db01      	blt.n	80047da <__sfputc_r+0x16>
 80047d6:	290a      	cmp	r1, #10
 80047d8:	d103      	bne.n	80047e2 <__sfputc_r+0x1e>
 80047da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047de:	f7ff bde8 	b.w	80043b2 <__swbuf_r>
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	1c58      	adds	r0, r3, #1
 80047e6:	6010      	str	r0, [r2, #0]
 80047e8:	7019      	strb	r1, [r3, #0]
 80047ea:	4608      	mov	r0, r1
 80047ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <__sfputs_r>:
 80047f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f4:	4606      	mov	r6, r0
 80047f6:	460f      	mov	r7, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	18d5      	adds	r5, r2, r3
 80047fc:	42ac      	cmp	r4, r5
 80047fe:	d101      	bne.n	8004804 <__sfputs_r+0x12>
 8004800:	2000      	movs	r0, #0
 8004802:	e007      	b.n	8004814 <__sfputs_r+0x22>
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	463a      	mov	r2, r7
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff ffda 	bl	80047c4 <__sfputc_r>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d1f3      	bne.n	80047fc <__sfputs_r+0xa>
 8004814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004818 <_vfiprintf_r>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	460d      	mov	r5, r1
 800481e:	b09d      	sub	sp, #116	; 0x74
 8004820:	4614      	mov	r4, r2
 8004822:	4698      	mov	r8, r3
 8004824:	4606      	mov	r6, r0
 8004826:	b118      	cbz	r0, 8004830 <_vfiprintf_r+0x18>
 8004828:	6a03      	ldr	r3, [r0, #32]
 800482a:	b90b      	cbnz	r3, 8004830 <_vfiprintf_r+0x18>
 800482c:	f7ff fcda 	bl	80041e4 <__sinit>
 8004830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004832:	07d9      	lsls	r1, r3, #31
 8004834:	d405      	bmi.n	8004842 <_vfiprintf_r+0x2a>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	059a      	lsls	r2, r3, #22
 800483a:	d402      	bmi.n	8004842 <_vfiprintf_r+0x2a>
 800483c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800483e:	f7ff fec6 	bl	80045ce <__retarget_lock_acquire_recursive>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	d501      	bpl.n	800484c <_vfiprintf_r+0x34>
 8004848:	692b      	ldr	r3, [r5, #16]
 800484a:	b99b      	cbnz	r3, 8004874 <_vfiprintf_r+0x5c>
 800484c:	4629      	mov	r1, r5
 800484e:	4630      	mov	r0, r6
 8004850:	f7ff fdec 	bl	800442c <__swsetup_r>
 8004854:	b170      	cbz	r0, 8004874 <_vfiprintf_r+0x5c>
 8004856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004858:	07dc      	lsls	r4, r3, #31
 800485a:	d504      	bpl.n	8004866 <_vfiprintf_r+0x4e>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	b01d      	add	sp, #116	; 0x74
 8004862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	0598      	lsls	r0, r3, #22
 800486a:	d4f7      	bmi.n	800485c <_vfiprintf_r+0x44>
 800486c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800486e:	f7ff feaf 	bl	80045d0 <__retarget_lock_release_recursive>
 8004872:	e7f3      	b.n	800485c <_vfiprintf_r+0x44>
 8004874:	2300      	movs	r3, #0
 8004876:	9309      	str	r3, [sp, #36]	; 0x24
 8004878:	2320      	movs	r3, #32
 800487a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800487e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004882:	2330      	movs	r3, #48	; 0x30
 8004884:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a38 <_vfiprintf_r+0x220>
 8004888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800488c:	f04f 0901 	mov.w	r9, #1
 8004890:	4623      	mov	r3, r4
 8004892:	469a      	mov	sl, r3
 8004894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004898:	b10a      	cbz	r2, 800489e <_vfiprintf_r+0x86>
 800489a:	2a25      	cmp	r2, #37	; 0x25
 800489c:	d1f9      	bne.n	8004892 <_vfiprintf_r+0x7a>
 800489e:	ebba 0b04 	subs.w	fp, sl, r4
 80048a2:	d00b      	beq.n	80048bc <_vfiprintf_r+0xa4>
 80048a4:	465b      	mov	r3, fp
 80048a6:	4622      	mov	r2, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7ff ffa1 	bl	80047f2 <__sfputs_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	f000 80a9 	beq.w	8004a08 <_vfiprintf_r+0x1f0>
 80048b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b8:	445a      	add	r2, fp
 80048ba:	9209      	str	r2, [sp, #36]	; 0x24
 80048bc:	f89a 3000 	ldrb.w	r3, [sl]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a1 	beq.w	8004a08 <_vfiprintf_r+0x1f0>
 80048c6:	2300      	movs	r3, #0
 80048c8:	f04f 32ff 	mov.w	r2, #4294967295
 80048cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d0:	f10a 0a01 	add.w	sl, sl, #1
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048dc:	931a      	str	r3, [sp, #104]	; 0x68
 80048de:	4654      	mov	r4, sl
 80048e0:	2205      	movs	r2, #5
 80048e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e6:	4854      	ldr	r0, [pc, #336]	; (8004a38 <_vfiprintf_r+0x220>)
 80048e8:	f7fb fc7a 	bl	80001e0 <memchr>
 80048ec:	9a04      	ldr	r2, [sp, #16]
 80048ee:	b9d8      	cbnz	r0, 8004928 <_vfiprintf_r+0x110>
 80048f0:	06d1      	lsls	r1, r2, #27
 80048f2:	bf44      	itt	mi
 80048f4:	2320      	movmi	r3, #32
 80048f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fa:	0713      	lsls	r3, r2, #28
 80048fc:	bf44      	itt	mi
 80048fe:	232b      	movmi	r3, #43	; 0x2b
 8004900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004904:	f89a 3000 	ldrb.w	r3, [sl]
 8004908:	2b2a      	cmp	r3, #42	; 0x2a
 800490a:	d015      	beq.n	8004938 <_vfiprintf_r+0x120>
 800490c:	9a07      	ldr	r2, [sp, #28]
 800490e:	4654      	mov	r4, sl
 8004910:	2000      	movs	r0, #0
 8004912:	f04f 0c0a 	mov.w	ip, #10
 8004916:	4621      	mov	r1, r4
 8004918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800491c:	3b30      	subs	r3, #48	; 0x30
 800491e:	2b09      	cmp	r3, #9
 8004920:	d94d      	bls.n	80049be <_vfiprintf_r+0x1a6>
 8004922:	b1b0      	cbz	r0, 8004952 <_vfiprintf_r+0x13a>
 8004924:	9207      	str	r2, [sp, #28]
 8004926:	e014      	b.n	8004952 <_vfiprintf_r+0x13a>
 8004928:	eba0 0308 	sub.w	r3, r0, r8
 800492c:	fa09 f303 	lsl.w	r3, r9, r3
 8004930:	4313      	orrs	r3, r2
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	46a2      	mov	sl, r4
 8004936:	e7d2      	b.n	80048de <_vfiprintf_r+0xc6>
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	1d19      	adds	r1, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	9103      	str	r1, [sp, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	bfbb      	ittet	lt
 8004944:	425b      	neglt	r3, r3
 8004946:	f042 0202 	orrlt.w	r2, r2, #2
 800494a:	9307      	strge	r3, [sp, #28]
 800494c:	9307      	strlt	r3, [sp, #28]
 800494e:	bfb8      	it	lt
 8004950:	9204      	strlt	r2, [sp, #16]
 8004952:	7823      	ldrb	r3, [r4, #0]
 8004954:	2b2e      	cmp	r3, #46	; 0x2e
 8004956:	d10c      	bne.n	8004972 <_vfiprintf_r+0x15a>
 8004958:	7863      	ldrb	r3, [r4, #1]
 800495a:	2b2a      	cmp	r3, #42	; 0x2a
 800495c:	d134      	bne.n	80049c8 <_vfiprintf_r+0x1b0>
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	1d1a      	adds	r2, r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	9203      	str	r2, [sp, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfb8      	it	lt
 800496a:	f04f 33ff 	movlt.w	r3, #4294967295
 800496e:	3402      	adds	r4, #2
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a48 <_vfiprintf_r+0x230>
 8004976:	7821      	ldrb	r1, [r4, #0]
 8004978:	2203      	movs	r2, #3
 800497a:	4650      	mov	r0, sl
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	b138      	cbz	r0, 8004992 <_vfiprintf_r+0x17a>
 8004982:	9b04      	ldr	r3, [sp, #16]
 8004984:	eba0 000a 	sub.w	r0, r0, sl
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	4082      	lsls	r2, r0
 800498c:	4313      	orrs	r3, r2
 800498e:	3401      	adds	r4, #1
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004996:	4829      	ldr	r0, [pc, #164]	; (8004a3c <_vfiprintf_r+0x224>)
 8004998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499c:	2206      	movs	r2, #6
 800499e:	f7fb fc1f 	bl	80001e0 <memchr>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d03f      	beq.n	8004a26 <_vfiprintf_r+0x20e>
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <_vfiprintf_r+0x228>)
 80049a8:	bb1b      	cbnz	r3, 80049f2 <_vfiprintf_r+0x1da>
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	3307      	adds	r3, #7
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	3308      	adds	r3, #8
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b8:	443b      	add	r3, r7
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	e768      	b.n	8004890 <_vfiprintf_r+0x78>
 80049be:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c2:	460c      	mov	r4, r1
 80049c4:	2001      	movs	r0, #1
 80049c6:	e7a6      	b.n	8004916 <_vfiprintf_r+0xfe>
 80049c8:	2300      	movs	r3, #0
 80049ca:	3401      	adds	r4, #1
 80049cc:	9305      	str	r3, [sp, #20]
 80049ce:	4619      	mov	r1, r3
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4620      	mov	r0, r4
 80049d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049da:	3a30      	subs	r2, #48	; 0x30
 80049dc:	2a09      	cmp	r2, #9
 80049de:	d903      	bls.n	80049e8 <_vfiprintf_r+0x1d0>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0c6      	beq.n	8004972 <_vfiprintf_r+0x15a>
 80049e4:	9105      	str	r1, [sp, #20]
 80049e6:	e7c4      	b.n	8004972 <_vfiprintf_r+0x15a>
 80049e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ec:	4604      	mov	r4, r0
 80049ee:	2301      	movs	r3, #1
 80049f0:	e7f0      	b.n	80049d4 <_vfiprintf_r+0x1bc>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <_vfiprintf_r+0x22c>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4630      	mov	r0, r6
 80049fe:	f3af 8000 	nop.w
 8004a02:	4607      	mov	r7, r0
 8004a04:	1c78      	adds	r0, r7, #1
 8004a06:	d1d6      	bne.n	80049b6 <_vfiprintf_r+0x19e>
 8004a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a0a:	07d9      	lsls	r1, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_vfiprintf_r+0x202>
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	059a      	lsls	r2, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_vfiprintf_r+0x202>
 8004a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a16:	f7ff fddb 	bl	80045d0 <__retarget_lock_release_recursive>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	065b      	lsls	r3, r3, #25
 8004a1e:	f53f af1d 	bmi.w	800485c <_vfiprintf_r+0x44>
 8004a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a24:	e71c      	b.n	8004860 <_vfiprintf_r+0x48>
 8004a26:	ab03      	add	r3, sp, #12
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	462a      	mov	r2, r5
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <_vfiprintf_r+0x22c>)
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f879 	bl	8004b28 <_printf_i>
 8004a36:	e7e4      	b.n	8004a02 <_vfiprintf_r+0x1ea>
 8004a38:	080050dc 	.word	0x080050dc
 8004a3c:	080050e6 	.word	0x080050e6
 8004a40:	00000000 	.word	0x00000000
 8004a44:	080047f3 	.word	0x080047f3
 8004a48:	080050e2 	.word	0x080050e2

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4616      	mov	r6, r2
 8004a52:	4699      	mov	r9, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfb8      	it	lt
 8004a60:	4613      	movlt	r3, r2
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a68:	4607      	mov	r7, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b10a      	cbz	r2, 8004a72 <_printf_common+0x26>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	6833      	ldrmi	r3, [r6, #0]
 8004a7a:	3302      	addmi	r3, #2
 8004a7c:	6033      	strmi	r3, [r6, #0]
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	f015 0506 	ands.w	r5, r5, #6
 8004a84:	d106      	bne.n	8004a94 <_printf_common+0x48>
 8004a86:	f104 0a19 	add.w	sl, r4, #25
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	6832      	ldr	r2, [r6, #0]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dc26      	bgt.n	8004ae2 <_printf_common+0x96>
 8004a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a98:	1e13      	subs	r3, r2, #0
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	bf18      	it	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	0692      	lsls	r2, r2, #26
 8004aa2:	d42b      	bmi.n	8004afc <_printf_common+0xb0>
 8004aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d01e      	beq.n	8004af0 <_printf_common+0xa4>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	bf02      	ittt	eq
 8004abe:	68e5      	ldreq	r5, [r4, #12]
 8004ac0:	6833      	ldreq	r3, [r6, #0]
 8004ac2:	1aed      	subeq	r5, r5, r3
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	bf0c      	ite	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	2500      	movne	r5, #0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfc4      	itt	gt
 8004ad2:	1a9b      	subgt	r3, r3, r2
 8004ad4:	18ed      	addgt	r5, r5, r3
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	341a      	adds	r4, #26
 8004ada:	42b5      	cmp	r5, r6
 8004adc:	d11a      	bne.n	8004b14 <_printf_common+0xc8>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e008      	b.n	8004af4 <_printf_common+0xa8>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	4638      	mov	r0, r7
 8004aea:	47c0      	blx	r8
 8004aec:	3001      	adds	r0, #1
 8004aee:	d103      	bne.n	8004af8 <_printf_common+0xac>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	3501      	adds	r5, #1
 8004afa:	e7c6      	b.n	8004a8a <_printf_common+0x3e>
 8004afc:	18e1      	adds	r1, r4, r3
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	2030      	movs	r0, #48	; 0x30
 8004b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b06:	4422      	add	r2, r4
 8004b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b10:	3302      	adds	r3, #2
 8004b12:	e7c7      	b.n	8004aa4 <_printf_common+0x58>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4622      	mov	r2, r4
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0e6      	beq.n	8004af0 <_printf_common+0xa4>
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7d9      	b.n	8004ada <_printf_common+0x8e>
	...

08004b28 <_printf_i>:
 8004b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	7e0f      	ldrb	r7, [r1, #24]
 8004b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b30:	2f78      	cmp	r7, #120	; 0x78
 8004b32:	4691      	mov	r9, r2
 8004b34:	4680      	mov	r8, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	469a      	mov	sl, r3
 8004b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b3e:	d807      	bhi.n	8004b50 <_printf_i+0x28>
 8004b40:	2f62      	cmp	r7, #98	; 0x62
 8004b42:	d80a      	bhi.n	8004b5a <_printf_i+0x32>
 8004b44:	2f00      	cmp	r7, #0
 8004b46:	f000 80d4 	beq.w	8004cf2 <_printf_i+0x1ca>
 8004b4a:	2f58      	cmp	r7, #88	; 0x58
 8004b4c:	f000 80c0 	beq.w	8004cd0 <_printf_i+0x1a8>
 8004b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b58:	e03a      	b.n	8004bd0 <_printf_i+0xa8>
 8004b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b5e:	2b15      	cmp	r3, #21
 8004b60:	d8f6      	bhi.n	8004b50 <_printf_i+0x28>
 8004b62:	a101      	add	r1, pc, #4	; (adr r1, 8004b68 <_printf_i+0x40>)
 8004b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004b51 	.word	0x08004b51
 8004b74:	08004b51 	.word	0x08004b51
 8004b78:	08004b51 	.word	0x08004b51
 8004b7c:	08004b51 	.word	0x08004b51
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004b51 	.word	0x08004b51
 8004b88:	08004b51 	.word	0x08004b51
 8004b8c:	08004b51 	.word	0x08004b51
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	08004cd9 	.word	0x08004cd9
 8004b98:	08004c01 	.word	0x08004c01
 8004b9c:	08004c93 	.word	0x08004c93
 8004ba0:	08004b51 	.word	0x08004b51
 8004ba4:	08004b51 	.word	0x08004b51
 8004ba8:	08004cfb 	.word	0x08004cfb
 8004bac:	08004b51 	.word	0x08004b51
 8004bb0:	08004c01 	.word	0x08004c01
 8004bb4:	08004b51 	.word	0x08004b51
 8004bb8:	08004b51 	.word	0x08004b51
 8004bbc:	08004c9b 	.word	0x08004c9b
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e09f      	b.n	8004d14 <_printf_i+0x1ec>
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	0607      	lsls	r7, r0, #24
 8004bda:	f103 0104 	add.w	r1, r3, #4
 8004bde:	6029      	str	r1, [r5, #0]
 8004be0:	d501      	bpl.n	8004be6 <_printf_i+0xbe>
 8004be2:	681e      	ldr	r6, [r3, #0]
 8004be4:	e003      	b.n	8004bee <_printf_i+0xc6>
 8004be6:	0646      	lsls	r6, r0, #25
 8004be8:	d5fb      	bpl.n	8004be2 <_printf_i+0xba>
 8004bea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	da03      	bge.n	8004bfa <_printf_i+0xd2>
 8004bf2:	232d      	movs	r3, #45	; 0x2d
 8004bf4:	4276      	negs	r6, r6
 8004bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfa:	485a      	ldr	r0, [pc, #360]	; (8004d64 <_printf_i+0x23c>)
 8004bfc:	230a      	movs	r3, #10
 8004bfe:	e012      	b.n	8004c26 <_printf_i+0xfe>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	1d19      	adds	r1, r3, #4
 8004c06:	6029      	str	r1, [r5, #0]
 8004c08:	0605      	lsls	r5, r0, #24
 8004c0a:	d501      	bpl.n	8004c10 <_printf_i+0xe8>
 8004c0c:	681e      	ldr	r6, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <_printf_i+0xee>
 8004c10:	0641      	lsls	r1, r0, #25
 8004c12:	d5fb      	bpl.n	8004c0c <_printf_i+0xe4>
 8004c14:	881e      	ldrh	r6, [r3, #0]
 8004c16:	4853      	ldr	r0, [pc, #332]	; (8004d64 <_printf_i+0x23c>)
 8004c18:	2f6f      	cmp	r7, #111	; 0x6f
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2308      	moveq	r3, #8
 8004c1e:	230a      	movne	r3, #10
 8004c20:	2100      	movs	r1, #0
 8004c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c26:	6865      	ldr	r5, [r4, #4]
 8004c28:	60a5      	str	r5, [r4, #8]
 8004c2a:	2d00      	cmp	r5, #0
 8004c2c:	bfa2      	ittt	ge
 8004c2e:	6821      	ldrge	r1, [r4, #0]
 8004c30:	f021 0104 	bicge.w	r1, r1, #4
 8004c34:	6021      	strge	r1, [r4, #0]
 8004c36:	b90e      	cbnz	r6, 8004c3c <_printf_i+0x114>
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	d04b      	beq.n	8004cd4 <_printf_i+0x1ac>
 8004c3c:	4615      	mov	r5, r2
 8004c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c42:	fb03 6711 	mls	r7, r3, r1, r6
 8004c46:	5dc7      	ldrb	r7, [r0, r7]
 8004c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c4c:	4637      	mov	r7, r6
 8004c4e:	42bb      	cmp	r3, r7
 8004c50:	460e      	mov	r6, r1
 8004c52:	d9f4      	bls.n	8004c3e <_printf_i+0x116>
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d10b      	bne.n	8004c70 <_printf_i+0x148>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07de      	lsls	r6, r3, #31
 8004c5c:	d508      	bpl.n	8004c70 <_printf_i+0x148>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	6861      	ldr	r1, [r4, #4]
 8004c62:	4299      	cmp	r1, r3
 8004c64:	bfde      	ittt	le
 8004c66:	2330      	movle	r3, #48	; 0x30
 8004c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c70:	1b52      	subs	r2, r2, r5
 8004c72:	6122      	str	r2, [r4, #16]
 8004c74:	f8cd a000 	str.w	sl, [sp]
 8004c78:	464b      	mov	r3, r9
 8004c7a:	aa03      	add	r2, sp, #12
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fee4 	bl	8004a4c <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d14a      	bne.n	8004d1e <_printf_i+0x1f6>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	b004      	add	sp, #16
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f043 0320 	orr.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	4833      	ldr	r0, [pc, #204]	; (8004d68 <_printf_i+0x240>)
 8004c9c:	2778      	movs	r7, #120	; 0x78
 8004c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	6829      	ldr	r1, [r5, #0]
 8004ca6:	061f      	lsls	r7, r3, #24
 8004ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cac:	d402      	bmi.n	8004cb4 <_printf_i+0x18c>
 8004cae:	065f      	lsls	r7, r3, #25
 8004cb0:	bf48      	it	mi
 8004cb2:	b2b6      	uxthmi	r6, r6
 8004cb4:	07df      	lsls	r7, r3, #31
 8004cb6:	bf48      	it	mi
 8004cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	bf48      	it	mi
 8004cc0:	6023      	strmi	r3, [r4, #0]
 8004cc2:	b91e      	cbnz	r6, 8004ccc <_printf_i+0x1a4>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2310      	movs	r3, #16
 8004cce:	e7a7      	b.n	8004c20 <_printf_i+0xf8>
 8004cd0:	4824      	ldr	r0, [pc, #144]	; (8004d64 <_printf_i+0x23c>)
 8004cd2:	e7e4      	b.n	8004c9e <_printf_i+0x176>
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	e7bd      	b.n	8004c54 <_printf_i+0x12c>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	6826      	ldr	r6, [r4, #0]
 8004cdc:	6961      	ldr	r1, [r4, #20]
 8004cde:	1d18      	adds	r0, r3, #4
 8004ce0:	6028      	str	r0, [r5, #0]
 8004ce2:	0635      	lsls	r5, r6, #24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0x1c4>
 8004ce8:	6019      	str	r1, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0x1ca>
 8004cec:	0670      	lsls	r0, r6, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0x1c0>
 8004cf0:	8019      	strh	r1, [r3, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	4615      	mov	r5, r2
 8004cf8:	e7bc      	b.n	8004c74 <_printf_i+0x14c>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	6862      	ldr	r2, [r4, #4]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f7fb fa6a 	bl	80001e0 <memchr>
 8004d0c:	b108      	cbz	r0, 8004d12 <_printf_i+0x1ea>
 8004d0e:	1b40      	subs	r0, r0, r5
 8004d10:	6060      	str	r0, [r4, #4]
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	2300      	movs	r3, #0
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	e7aa      	b.n	8004c74 <_printf_i+0x14c>
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	462a      	mov	r2, r5
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	47d0      	blx	sl
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0ad      	beq.n	8004c88 <_printf_i+0x160>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	d413      	bmi.n	8004d5a <_printf_i+0x232>
 8004d32:	68e0      	ldr	r0, [r4, #12]
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	4298      	cmp	r0, r3
 8004d38:	bfb8      	it	lt
 8004d3a:	4618      	movlt	r0, r3
 8004d3c:	e7a6      	b.n	8004c8c <_printf_i+0x164>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d09d      	beq.n	8004c88 <_printf_i+0x160>
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	68e3      	ldr	r3, [r4, #12]
 8004d50:	9903      	ldr	r1, [sp, #12]
 8004d52:	1a5b      	subs	r3, r3, r1
 8004d54:	42ab      	cmp	r3, r5
 8004d56:	dcf2      	bgt.n	8004d3e <_printf_i+0x216>
 8004d58:	e7eb      	b.n	8004d32 <_printf_i+0x20a>
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	f104 0619 	add.w	r6, r4, #25
 8004d60:	e7f5      	b.n	8004d4e <_printf_i+0x226>
 8004d62:	bf00      	nop
 8004d64:	080050ed 	.word	0x080050ed
 8004d68:	080050fe 	.word	0x080050fe

08004d6c <__sflush_r>:
 8004d6c:	898a      	ldrh	r2, [r1, #12]
 8004d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	0710      	lsls	r0, r2, #28
 8004d76:	460c      	mov	r4, r1
 8004d78:	d458      	bmi.n	8004e2c <__sflush_r+0xc0>
 8004d7a:	684b      	ldr	r3, [r1, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dc05      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dc02      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d0f9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d98:	682f      	ldr	r7, [r5, #0]
 8004d9a:	6a21      	ldr	r1, [r4, #32]
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	d032      	beq.n	8004e06 <__sflush_r+0x9a>
 8004da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	075a      	lsls	r2, r3, #29
 8004da6:	d505      	bpl.n	8004db4 <__sflush_r+0x48>
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	1ac0      	subs	r0, r0, r3
 8004dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dae:	b10b      	cbz	r3, 8004db4 <__sflush_r+0x48>
 8004db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db2:	1ac0      	subs	r0, r0, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	4602      	mov	r2, r0
 8004db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dba:	6a21      	ldr	r1, [r4, #32]
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b0      	blx	r6
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	d106      	bne.n	8004dd4 <__sflush_r+0x68>
 8004dc6:	6829      	ldr	r1, [r5, #0]
 8004dc8:	291d      	cmp	r1, #29
 8004dca:	d82b      	bhi.n	8004e24 <__sflush_r+0xb8>
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <__sflush_r+0x108>)
 8004dce:	410a      	asrs	r2, r1
 8004dd0:	07d6      	lsls	r6, r2, #31
 8004dd2:	d427      	bmi.n	8004e24 <__sflush_r+0xb8>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6062      	str	r2, [r4, #4]
 8004dd8:	04d9      	lsls	r1, r3, #19
 8004dda:	6922      	ldr	r2, [r4, #16]
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	d504      	bpl.n	8004dea <__sflush_r+0x7e>
 8004de0:	1c42      	adds	r2, r0, #1
 8004de2:	d101      	bne.n	8004de8 <__sflush_r+0x7c>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b903      	cbnz	r3, 8004dea <__sflush_r+0x7e>
 8004de8:	6560      	str	r0, [r4, #84]	; 0x54
 8004dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dec:	602f      	str	r7, [r5, #0]
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d0c9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df6:	4299      	cmp	r1, r3
 8004df8:	d002      	beq.n	8004e00 <__sflush_r+0x94>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7ff fbea 	bl	80045d4 <_free_r>
 8004e00:	2000      	movs	r0, #0
 8004e02:	6360      	str	r0, [r4, #52]	; 0x34
 8004e04:	e7c0      	b.n	8004d88 <__sflush_r+0x1c>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	1c41      	adds	r1, r0, #1
 8004e0e:	d1c8      	bne.n	8004da2 <__sflush_r+0x36>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0c5      	beq.n	8004da2 <__sflush_r+0x36>
 8004e16:	2b1d      	cmp	r3, #29
 8004e18:	d001      	beq.n	8004e1e <__sflush_r+0xb2>
 8004e1a:	2b16      	cmp	r3, #22
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0xb6>
 8004e1e:	602f      	str	r7, [r5, #0]
 8004e20:	e7b1      	b.n	8004d86 <__sflush_r+0x1a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e7ad      	b.n	8004d88 <__sflush_r+0x1c>
 8004e2c:	690f      	ldr	r7, [r1, #16]
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d0a9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004e32:	0793      	lsls	r3, r2, #30
 8004e34:	680e      	ldr	r6, [r1, #0]
 8004e36:	bf08      	it	eq
 8004e38:	694b      	ldreq	r3, [r1, #20]
 8004e3a:	600f      	str	r7, [r1, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2300      	movne	r3, #0
 8004e40:	eba6 0807 	sub.w	r8, r6, r7
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	dd9c      	ble.n	8004d86 <__sflush_r+0x1a>
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e50:	4643      	mov	r3, r8
 8004e52:	463a      	mov	r2, r7
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b0      	blx	r6
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	dc06      	bgt.n	8004e6a <__sflush_r+0xfe>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	e78e      	b.n	8004d88 <__sflush_r+0x1c>
 8004e6a:	4407      	add	r7, r0
 8004e6c:	eba8 0800 	sub.w	r8, r8, r0
 8004e70:	e7e9      	b.n	8004e46 <__sflush_r+0xda>
 8004e72:	bf00      	nop
 8004e74:	dfbffffe 	.word	0xdfbffffe

08004e78 <_fflush_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b913      	cbnz	r3, 8004e88 <_fflush_r+0x10>
 8004e82:	2500      	movs	r5, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	b118      	cbz	r0, 8004e92 <_fflush_r+0x1a>
 8004e8a:	6a03      	ldr	r3, [r0, #32]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <_fflush_r+0x1a>
 8004e8e:	f7ff f9a9 	bl	80041e4 <__sinit>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f3      	beq.n	8004e82 <_fflush_r+0xa>
 8004e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e9c:	07d0      	lsls	r0, r2, #31
 8004e9e:	d404      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea0:	0599      	lsls	r1, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f7ff fb92 	bl	80045ce <__retarget_lock_acquire_recursive>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	4621      	mov	r1, r4
 8004eae:	f7ff ff5d 	bl	8004d6c <__sflush_r>
 8004eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb4:	07da      	lsls	r2, r3, #31
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	d4e4      	bmi.n	8004e84 <_fflush_r+0xc>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	059b      	lsls	r3, r3, #22
 8004ebe:	d4e1      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f7ff fb85 	bl	80045d0 <__retarget_lock_release_recursive>
 8004ec6:	e7dd      	b.n	8004e84 <_fflush_r+0xc>

08004ec8 <__swhatbuf_r>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	460c      	mov	r4, r1
 8004ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	b096      	sub	sp, #88	; 0x58
 8004ed4:	4615      	mov	r5, r2
 8004ed6:	461e      	mov	r6, r3
 8004ed8:	da0d      	bge.n	8004ef6 <__swhatbuf_r+0x2e>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	bf0c      	ite	eq
 8004ee6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004eea:	2340      	movne	r3, #64	; 0x40
 8004eec:	2000      	movs	r0, #0
 8004eee:	6031      	str	r1, [r6, #0]
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	b016      	add	sp, #88	; 0x58
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
 8004ef6:	466a      	mov	r2, sp
 8004ef8:	f000 f848 	bl	8004f8c <_fstat_r>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	dbec      	blt.n	8004eda <__swhatbuf_r+0x12>
 8004f00:	9901      	ldr	r1, [sp, #4]
 8004f02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f0a:	4259      	negs	r1, r3
 8004f0c:	4159      	adcs	r1, r3
 8004f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f12:	e7eb      	b.n	8004eec <__swhatbuf_r+0x24>

08004f14 <__smakebuf_r>:
 8004f14:	898b      	ldrh	r3, [r1, #12]
 8004f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f18:	079d      	lsls	r5, r3, #30
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	d507      	bpl.n	8004f30 <__smakebuf_r+0x1c>
 8004f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	6123      	str	r3, [r4, #16]
 8004f28:	2301      	movs	r3, #1
 8004f2a:	6163      	str	r3, [r4, #20]
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	ab01      	add	r3, sp, #4
 8004f32:	466a      	mov	r2, sp
 8004f34:	f7ff ffc8 	bl	8004ec8 <__swhatbuf_r>
 8004f38:	9900      	ldr	r1, [sp, #0]
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7ff fbb5 	bl	80046ac <_malloc_r>
 8004f42:	b948      	cbnz	r0, 8004f58 <__smakebuf_r+0x44>
 8004f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d4ef      	bmi.n	8004f2c <__smakebuf_r+0x18>
 8004f4c:	f023 0303 	bic.w	r3, r3, #3
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e7e3      	b.n	8004f20 <__smakebuf_r+0xc>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	6020      	str	r0, [r4, #0]
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	9b00      	ldr	r3, [sp, #0]
 8004f64:	6163      	str	r3, [r4, #20]
 8004f66:	9b01      	ldr	r3, [sp, #4]
 8004f68:	6120      	str	r0, [r4, #16]
 8004f6a:	b15b      	cbz	r3, 8004f84 <__smakebuf_r+0x70>
 8004f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f81d 	bl	8004fb0 <_isatty_r>
 8004f76:	b128      	cbz	r0, 8004f84 <__smakebuf_r+0x70>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	431d      	orrs	r5, r3
 8004f88:	81a5      	strh	r5, [r4, #12]
 8004f8a:	e7cf      	b.n	8004f2c <__smakebuf_r+0x18>

08004f8c <_fstat_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_fstat_r+0x20>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	f7fb fe36 	bl	8000c0a <_fstat>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d102      	bne.n	8004fa8 <_fstat_r+0x1c>
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	b103      	cbz	r3, 8004fa8 <_fstat_r+0x1c>
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
 8004faa:	bf00      	nop
 8004fac:	20004210 	.word	0x20004210

08004fb0 <_isatty_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_isatty_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fb fe35 	bl	8000c2a <_isatty>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_isatty_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_isatty_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20004210 	.word	0x20004210

08004fd0 <_sbrk_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d06      	ldr	r5, [pc, #24]	; (8004fec <_sbrk_r+0x1c>)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	f7fb fe3e 	bl	8000c5c <_sbrk>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_sbrk_r+0x1a>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_sbrk_r+0x1a>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	20004210 	.word	0x20004210

08004ff0 <_init>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr

08004ffc <_fini>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr
